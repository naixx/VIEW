
// Javascript Solar Eclipse Calculator (Xavier Jubier: http://xjubier.free.fr/)
// Copyright (C) 2004-2017 Xavier M. Jubier
//
// Used by Elijah Parker with permission 

/*
Modifications:
2004-06-10   Xavier Jubier   Added language parameter to recalculate()
2005-06-16   Xavier Jubier   Added base 10 specification in parseInt()
2005-06-17   Xavier Jubier   Added display of deltaT, plus some number formatting features
2005-07-04   Xavier Jubier   Adjusted values of deltaT
2005-07-20   Xavier Jubier   Added parameter string parsing
2005-07-22   Xavier Jubier   Miscellaneous corrections
2007-07-20   Xavier Jubier   Added eclipse diagram and XML
2008-01-18   Xavier Jubier   Added altitude with refraction (no time correction)
2008-03-12   Xavier Jubier   Minor corrections and huge code adaptation for most browsers
2009-01-05   Xavier Jubier   Moon libration calculation for Watts chart
2009-01-29   Xavier Jubier   Lunar limb corrections with Watts chart
2009-11-20   Xavier Jubier   Lunar limb corrections with Kaguya's DEM
2013-01-31   Xavier Jubier   Solar mesosphere 0.5" correction (add &Mes=1 to URL)
2013-03-26   Xavier Jubier   Fix for annulars near the limits
2016-01-01   Xavier Jubier   Adjusted geolocation on supported browsers
2017-07-27   Elijah Parker   Removed DOM references and adapted to nodejs module
*/

var gLat, gLng;
var gPrevLat = 0.0;
var gPrevLng = 0.0;
var gCircumstancesComputed = false;
var D2R = Math.PI / 180.0;
var R2D = 180.0 / Math.PI;
var gRefractionHeight = -0.00524;	// Take refraction into account
var gMoonData = new Object();
var gMes = 0;

var error = null;
var inputs = {};
var outputs = {};

//
// Eclipse Elements
//
// First line -
//  (0) Julian day of maximum eclipse
//  (1) t0 - the TDT hour at which t=0
//  (2) tmin - the lowest allowed value of t
//  (3) tmax - the highest allowed value of t
//  (4) dUTC - the difference between the civilian "GMT" timescale and TDT
//  (5) dT - the difference between UT and TDT
// Second line -
//  (6) X0, X1, X2, X3 - X elements
// Third line -
// (10) Y0, Y1, Y2, Y3 - Y elements
// Fourth line -
// (14) D0, D1, D2 - D elements
// Fifth line -
// (17) M0, M1, M2 - mu elements
// Sixth line -
// (20) L10, L11, L12 - L1 elements
// Seventh line -
// (23) L20, L21, L22 - L2 elements
// Eighth line -
// (26) tan f1
// (27) tan f2
//

var elements = new Array(
//1970 Mar 7
2440653.23506594,  18.0,  -3.0,   3.0, 40.4, 40.4,
  -0.03259033,  0.50545258, -2.2683e-05, -8.1572e-06,
   0.49146291,  0.27499732, -7.8943e-07, -4.6430e-06,
  -5.23251656,  0.01554100,  1.0044e-06,
  87.22360389, 15.00374373,  1.3341e-06,
   0.53947589,  0.00006010, -1.2706e-05,
  -0.00664825,  0.00005980, -1.2642e-05,
   0.00471047,  0.00468701,
//1970 Aug 31
2440830.41354046,  22.0,  -4.0,   3.0, 40.8, 40.8,
  -0.21531860,  0.44769948, -1.1633e-05, -4.9319e-06,
  -0.49274858, -0.23453267, -2.4169e-05,  2.7466e-06,
   8.54803433, -0.01448508, -1.9053e-06,
 149.93500528, 15.00433014,  1.0940e-06,
   0.56760036, -0.00001617, -9.7296e-06,
   0.02133636, -0.00001609, -9.6812e-06,
   0.00463379,  0.00461071,
//1971 Feb 25
2441007.90147064,  10.0,  -3.0,   2.0, 41.3, 41.3,
  -0.32151362,  0.51789356, -4.0755e-06, -8.6539e-06,
   1.09238630,  0.26550747, -5.0956e-06, -4.6545e-06,
  -9.26003462,  0.01480197,  2.0026e-06,
 326.68786998, 15.00288349,  2.0964e-06,
   0.53718778, -0.00004126, -1.3034e-05,
  -0.00892498, -0.00004105, -1.2969e-05,
   0.00472292,  0.00469940,
//1971 Jul 22
2441154.89716778,  10.0,  -2.0,   1.0, 41.8, 41.8,
   0.68554113,  0.50543482, -8.3007e-05, -6.3875e-06,
   1.37126951, -0.15726262, -1.8103e-04,  2.1562e-06,
  20.36965961, -0.00779889, -4.4911e-06,
 328.41118665, 15.00082298,  1.8266e-06,
   0.55454223,  0.00010073, -1.0537e-05,
   0.00834334,  0.00010023, -1.0484e-05,
   0.00460218,  0.00457926,
//1971 Aug 20
2441184.44411402,  23.0,  -3.0,   2.0, 41.8, 41.8,
  -0.38978972,  0.46392811, -2.5620e-05, -5.4049e-06,
  -1.21715123, -0.22285872, -1.1402e-05,  2.7416e-06,
  12.42899907, -0.01321412, -2.7996e-06,
 164.15604732, 15.00361354,  1.6403e-06,
   0.56232193,  0.00007557, -1.0050e-05,
   0.01608425,  0.00007519, -9.9996e-06,
   0.00462199,  0.00459897,
//1972 Jan 16
2441332.96067525,  11.0,  -3.0,   3.0, 42.184, 42.3,
   0.23215396,  0.52077076, -3.4226e-05, -7.1196e-06,
  -0.90778791,  0.15136742,  1.8802e-04, -2.2029e-06,
 -21.05788929,  0.00739399,  5.3561e-06,
 342.60723590, 14.99772742,  2.3092e-06,
   0.55650144, -0.00012142, -1.1379e-05,
   0.01029241, -0.00012082, -1.1322e-05,
   0.00475380,  0.00473012,
//1972 Jul 10
2441509.32405226,  20.0,  -3.0,   3.0, 43.184, 42.8,
   0.28180188,  0.54694634, -6.4693e-05, -8.2882e-06,
   0.63913914, -0.13100556, -1.7899e-04,  2.1497e-06,
  22.14701199, -0.00513984, -5.0695e-06,
 118.65976002, 14.99997927,  1.3919e-06,
   0.53948887,  0.00010210, -1.1861e-05,
  -0.00663504,  0.00010160, -1.1802e-05,
   0.00459882,  0.00457592,
//1973 Jan 4
2441687.15718350,  16.0,  -4.0,   3.0, 44.184, 43.38,
   0.16819539,  0.50076554, -2.6059e-05, -5.8085e-06,
  -0.23490599,  0.10499598,  1.6072e-04, -1.3388e-06,
 -22.68856692,  0.00422709,  6.0980e-06,
  58.72224457, 14.99662022,  1.4355e-06,
   0.57128683, -0.00008145, -1.0190e-05,
   0.02500416, -0.00008104, -1.0139e-05,
   0.00475638,  0.00473270,
//1973 Jun 30
2441863.98519201,  12.0,  -3.0,   3.0, 44.184, 43.95,
   0.19178969,  0.57546759, -4.0744e-05, -9.7411e-06,
  -0.11111309, -0.09466382, -1.5798e-04,  1.7471e-06,
  23.16779122, -0.00232936, -5.4769e-06,
 359.10876379, 14.99943098,  7.4139e-07,
   0.53061302,  0.00001900, -1.2765e-05,
  -0.01546669,  0.00001890, -1.2702e-05,
   0.00459825,  0.00457535,
//1973 Dec 24
2442041.12689280,  15.0,  -3.0,   4.0, 44.184, 44.46,
  -0.07312115,  0.49988998, -2.0113e-05, -5.5558e-06,
   0.41127803,  0.06085132,  1.3945e-04, -7.8937e-07,
 -23.41661250,  0.00070772,  6.4596e-06,
  45.08232785, 14.99615241,  1.3312e-07,
   0.57518396,  0.00002672, -9.8982e-06,
   0.02888189,  0.00002659, -9.8489e-06,
   0.00475528,  0.00473160,
//1974 Jun 20
2442218.70005055,   5.0,  -3.0,   3.0, 45.184, 44.97,
   0.04381487,  0.57430003, -5.6398e-06, -9.4037e-06,
  -0.83066513, -0.04926458, -1.2050e-04,  9.3975e-07,
  23.43549991,  0.00056747, -5.6812e-06,
 254.65780898, 14.99921673, -2.6165e-08,
   0.53341231, -0.00007637, -1.2481e-05,
  -0.01268134, -0.00007599, -1.2419e-05,
   0.00460061,  0.00457770,
//1974 Dec 13
2442395.17584624,  16.0,  -2.0,   3.0, 45.184, 45.43,
  -0.15130030,  0.52346954, -1.6005e-05, -6.5101e-06,
   1.07530769,  0.01739977,  1.1452e-04, -3.0628e-07,
 -23.15630228, -0.00282684,  6.3695e-06,
  61.45851494, 14.99647740, -1.1849e-06,
   0.56478950,  0.00011429, -1.0656e-05,
   0.01853920,  0.00011372, -1.0602e-05,
   0.00475049,  0.00472683,
//1975 May 11
2442543.80385536,   7.0,  -2.0,   3.0, 46.184, 45.86,
  -0.33642675,  0.52215036,  4.9533e-05, -6.7003e-06,
   1.02199301,  0.09154182, -1.5039e-04, -1.1218e-06,
  17.73483399,  0.01059320, -3.9285e-06,
 285.90758600, 15.00166393, -1.9116e-06,
   0.55563030, -0.00010870, -1.0632e-05,
   0.00942592, -0.00010816, -1.0579e-05,
   0.00462997,  0.00460691,
//1975 Nov 3
2442720.05271162,  13.0,  -2.0,   3.0, 46.184, 46.29,
  -0.37404397,  0.55952729,  3.0735e-05, -9.0787e-06,
  -0.96607954, -0.12643840,  1.5743e-04,  1.9486e-06,
 -14.96477399, -0.01276184,  3.1328e-06,
  19.09655774, 15.00145318, -2.8015e-06,
   0.54039729,  0.00008898, -1.2621e-05,
  -0.00573143,  0.00008854, -1.2558e-05,
   0.00471334,  0.00468987,
//1976 Apr 29
2442897.93353795,  10.0,  -3.0,   4.0, 47.184, 46.82,
  -0.27503376,  0.49430404,  3.4641e-05, -5.5859e-06,
   0.28391949,  0.11243641, -9.2956e-05, -1.2075e-06,
  14.56363690,  0.01261925, -3.2417e-06,
 330.66960699, 15.00265299, -1.7731e-06,
   0.56741800, -0.00003436, -9.7989e-06,
   0.02115488, -0.00003419, -9.7501e-06,
   0.00464281,  0.00461969,
//1976 Oct 23
2443074.71788562,   5.0,  -3.0,   3.0, 47.184, 47.31,
  -0.21339459,  0.56328296,  3.3728e-05, -9.5766e-06,
  -0.28150887, -0.15026080,  9.0240e-05,  2.4702e-06,
 -11.44277252, -0.01423271,  2.2782e-06,
 258.90756260, 15.00283022, -2.3319e-06,
   0.53576643, -0.00001092, -1.3015e-05,
  -0.01033920, -0.00001087, -1.2950e-05,
   0.00469991,  0.00467650,
//1977 Apr 18
2443251.93853996,  11.0,  -4.0,   3.0, 48.184, 47.84,
   0.33826455,  0.49262397, -4.0677e-06, -5.6753e-06,
  -0.32184276,  0.13328393, -5.0487e-05, -1.4738e-06,
  10.86802947,  0.01420036, -2.4659e-06,
 345.16492905, 15.00354408, -1.3837e-06,
   0.56645668,  0.00004991, -9.9560e-06,
   0.02019831,  0.00004967, -9.9064e-06,
   0.00465662,  0.00463343,
//1977 Oct 12
2443429.35239911,  20.0,  -3.0,   4.0, 48.184, 48.28,
  -0.13762422,  0.54020298,  3.3239e-05, -8.3056e-06,
   0.44132689, -0.16101514,  1.8014e-05,  2.3890e-06,
  -7.58560675, -0.01522500,  1.4607e-06,
 123.38939904, 15.00387211, -1.7408e-06,
   0.54333231, -0.00009004, -1.2135e-05,
  -0.00281097, -0.00008959, -1.2074e-05,
   0.00468615,  0.00466281,
//1978 Apr 7
2443606.12762221,  15.0,  -2.0,   3.0, 49.184, 48.86,
   0.28864409,  0.51485883, -1.7560e-05, -6.8872e-06,
  -1.07040875,  0.15584747,  3.4225e-06, -2.0345e-06,
   6.84699248,  0.01528305, -1.6841e-06,
  44.45822484, 15.00419111, -8.3947e-07,
   0.55398394,  0.00011724, -1.1034e-05,
   0.00778766,  0.00011666, -1.0979e-05,
   0.00467059,  0.00464733,
//1978 Oct 2
2443783.76994561,   6.0,  -2.0,   3.0, 49.184, 49.31,
   0.11055008,  0.50530892,  1.4585e-05, -6.5046e-06,
   1.18390203, -0.16086034, -3.9297e-05,  1.9846e-06,
  -3.44974110, -0.01575957,  6.4801e-07,
 272.61972777, 15.00454432, -1.0412e-06,
   0.55768644, -0.00009952, -1.0738e-05,
   0.01147172, -0.00009902, -1.0685e-05,
   0.00467218,  0.00464891,
//1979 Feb 26
2443931.20492702,  17.0,  -3.0,   3.0, 50.184, 49.75,
  -0.20600221,  0.55702727, -1.0223e-05, -9.3475e-06,
   0.87545110,  0.16251617,  3.9070e-06, -2.6336e-06,
  -8.75745602,  0.01517580,  1.8644e-06,
  71.75366302, 15.00310801,  1.9612e-06,
   0.53790220,  0.00004136, -1.2953e-05,
  -0.00821413,  0.00004115, -1.2889e-05,
   0.00472157,  0.00469805,
//1979 Aug 22
2444108.22405073,  17.0,  -3.0,   3.0, 50.184, 50.21,
  -0.42897619,  0.48865561, -3.1225e-06, -5.4679e-06,
  -0.88319887, -0.12830279, -2.9304e-05,  1.3718e-06,
  11.82268156, -0.01367850, -2.6284e-06,
  74.26847262, 15.00381524,  1.5891e-06,
   0.56708409,  0.00002143, -9.7069e-06,
   0.02082269,  0.00002132, -9.6585e-06,
   0.00462399,  0.00460096,
//1980 Feb 16
2444285.87084692,   9.0,  -3.0,   3.0, 51.184, 50.65,
   0.00103041,  0.56041681, -1.2459e-05, -9.3065e-06,
   0.22978656,  0.14254689,  7.3452e-05, -2.2805e-06,
 -12.56627861,  0.01400729,  2.7359e-06,
 311.46118316, 15.00194916,  2.5088e-06,
   0.53934975, -0.00006218, -1.2889e-05,
  -0.00677381, -0.00006187, -1.2825e-05,
   0.00473271,  0.00470914,
//1980 Aug 10
2444462.30024368,  19.0,  -3.0,   4.0, 51.184, 51.04,
  -0.14559500,  0.51036757, -2.7892e-05, -6.2679e-06,
  -0.16445617, -0.11048350, -7.8253e-05,  1.2883e-06,
  15.35354239, -0.01204436, -3.3597e-06,
 103.69969254, 15.00288351,  1.9128e-06,
   0.55838152,  0.00010527, -1.0307e-05,
   0.01216348,  0.00010474, -1.0255e-05,
   0.00461406,  0.00459108,
//1981 Feb 4
2444640.42318909,  22.0,  -3.0,   3.0, 51.184, 51.46,
   0.01344806,  0.53927885, -5.6948e-06, -7.7515e-06,
  -0.49118472,  0.11136021,  1.3515e-04, -1.5070e-06,
 -16.03494889,  0.01230621,  3.6558e-06,
 146.50033457, 15.00048746,  2.8381e-06,
   0.55204868, -0.00011762, -1.1705e-05,
   0.00586185, -0.00011704, -1.1646e-05,
   0.00474236,  0.00471874,
//1981 Jul 31
2444816.65736762,   4.0,  -3.0,   3.0, 52.184, 51.85,
   0.21525430,  0.54793640, -4.5609e-05, -8.0342e-06,
   0.55176625, -0.08917374, -1.4111e-04,  1.2408e-06,
  18.30328997, -0.01003576, -3.9874e-06,
 238.42450216, 15.00187354,  2.0277e-06,
   0.54301701,  0.00011136, -1.1579e-05,
  -0.00312449,  0.00011080, -1.1521e-05,
   0.00460618,  0.00458324,
//1982 Jan 25
2444994.69644925,   5.0,  -3.0,   2.0, 52.184, 52.22,
   0.32500023,  0.51230948, -1.6980e-05, -6.1725e-06,
  -1.19656234,  0.07533986,  1.7724e-04, -8.1392e-07,
 -19.03972193,  0.01001413,  4.6023e-06,
 251.94005970, 14.99889755,  2.7785e-06,
   0.56794775, -0.00010186, -1.0400e-05,
   0.02168172, -0.00010136, -1.0348e-05,
   0.00475014,  0.00472648,
//1982 Jun 21
2445142.00315608,  12.0,  -2.0,   2.0, 52.184, 52.56,
   0.07337533,  0.58126395,  1.2142e-05, -9.8862e-06,
  -1.20875445,  0.05667380, -9.9155e-05, -1.0936e-06,
  23.44344392, -0.00006997, -5.7323e-06,
 359.59476710, 14.99923654,  1.2501e-07,
   0.53016574,  0.00000105, -1.2818e-05,
  -0.01591175,  0.00000105, -1.2754e-05,
   0.00460010,  0.00457719,
//1982 Jul 20
2445171.28106283,  19.0,  -2.0,   2.0, 53.184, 52.60,
   0.27990680,  0.57789014, -3.6959e-05, -9.6812e-06,
   1.26646940, -0.06000159, -2.1316e-04,  9.2557e-07,
  20.61553515, -0.00772004, -4.4948e-06,
 103.43073983, 15.00088006,  1.8775e-06,
   0.53173223,  0.00004363, -1.2655e-05,
  -0.01435306,  0.00004341, -1.2592e-05,
   0.00460088,  0.00457797,
//1982 Dec 15
2445318.89732528,  10.0,  -3.0,   2.0, 53.184, 52.92,
   0.40209046,  0.50094629,  4.7065e-07, -5.6550e-06,
   1.08119709, -0.07597227,  1.1156e-04,  9.8310e-07,
 -23.26393322, -0.00201910,  6.4358e-06,
 331.25390400, 14.99632495, -8.9900e-07,
   0.57330141,  0.00004606, -1.0013e-05,
   0.02700871,  0.00004583, -9.9636e-06,
   0.00475184,  0.00472817,
//1983 Jun 11
2445496.69691545,   5.0,  -3.0,   3.0, 53.184, 53.40,
   0.24025982,  0.56096525,  2.9933e-05, -8.8593e-06,
  -0.45982303,  0.09958333, -1.3403e-04, -1.7069e-06,
  23.04493595,  0.00283416, -5.5380e-06,
 255.15377276, 14.99935957, -6.8131e-07,
   0.53647353, -0.00009957, -1.2200e-05,
  -0.00963538, -0.00009907, -1.2139e-05,
   0.00460455,  0.00458162,
//1983 Dec 4
2445673.02170260,  13.0,  -4.0,   3.0, 54.184, 53.73,
   0.34178900,  0.51896469,  3.8528e-06, -6.7748e-06,
   0.33128407, -0.12362552,  1.3725e-04,  1.7662e-06,
 -22.20571789, -0.00537030,  5.8797e-06,
  17.49466403, 14.99718880, -2.0111e-06,
   0.56005812,  0.00010999, -1.1024e-05,
   0.01383140,  0.00010944, -1.0969e-05,
   0.00474486,  0.00472123,
//1984 May 30
2445851.19839694,  17.0,  -4.0,   3.0, 54.184, 54.05,
   0.05601003,  0.52088913,  5.1153e-05, -6.9057e-06,
   0.29867074,  0.13301232, -1.5062e-04, -1.9179e-06,
  21.86889975,  0.00569501, -5.1383e-06,
  75.62094162, 14.99985361, -1.3152e-06,
   0.55110813, -0.00012498, -1.0885e-05,
   0.00492632, -0.00012436, -1.0831e-05,
   0.00461163,  0.00458866,
//1984 Nov 22
2446027.45436108,  23.0,  -3.0,   3.0, 54.184, 54.28,
  -0.04324950,  0.54060395,  3.2483e-05, -8.4253e-06,
  -0.31485940, -0.17163493,  1.5923e-04,  2.8437e-06,
 -20.32706770, -0.00828826,  5.0252e-06,
 168.42231138, 14.99853093, -2.6608e-06,
   0.54431507,  0.00009636, -1.2400e-05,
  -0.00183322,  0.00009588, -1.2338e-05,
   0.00473529,  0.00471171,
//1985 May 19
2446205.39557625,  21.0,  -2.0,   3.0, 54.184, 54.58,
  -0.57545817,  0.48482390,  6.9088e-05, -5.5325e-06,
   0.93886423,  0.16021264, -1.5239e-04, -1.9779e-06,
  19.89410535,  0.00840439, -4.5286e-06,
 135.89306877, 15.00068812, -1.7613e-06,
   0.56449181, -0.00005251, -9.8815e-06,
   0.01824332, -0.00005225, -9.8323e-06,
   0.00462127,  0.00459825,
//1985 Nov 12
2446382.09128322,  14.0,  -2.0,   3.0, 55.184, 54.79,
  -0.45631406,  0.54434076,  7.0625e-05, -9.2037e-06,
  -0.87380718, -0.21001159,  1.7004e-04,  3.7416e-06,
 -17.77673437, -0.01071540,  4.0289e-06,
  33.95781743, 15.00004346, -2.8380e-06,
   0.53679303,  0.00001187, -1.3090e-05,
  -0.00931778,  0.00001181, -1.3024e-05,
   0.00472405,  0.00470053,
//1986 Apr 9
2446529.76484231,   6.0,  -2.0,   3.0, 55.184, 55.01,
   0.34347935,  0.45629577, -6.4079e-06, -5.3355e-06,
  -1.04254287,  0.24137661, -4.1466e-08, -3.0062e-06,
   7.48054022,  0.01493897, -1.8116e-06,
 269.57362688, 15.00397683, -9.1542e-07,
   0.56416452,  0.00008974, -1.0196e-05,
   0.01791754,  0.00008930, -1.0145e-05,
   0.00466905,  0.00464580,
//1986 Oct 3
2446707.29600607,  19.0,  -3.0,   3.0, 55.184, 55.20,
   0.42664277,  0.48638744,  5.5597e-06, -7.0319e-06,
   0.89859252, -0.26658232, -2.9430e-05,  4.0251e-06,
  -4.06904532, -0.01545765,  7.7225e-07,
 107.75020233, 15.00441617, -1.1533e-06,
   0.54660766, -0.00011005, -1.1720e-05,
   0.00044811, -0.00010951, -1.1662e-05,
   0.00467360,  0.00465033,
//1987 Mar 29
2446884.03457446,  13.0,  -3.0,   3.0, 55.184, 55.46,
   0.22913754,  0.47956254, -1.6768e-05, -6.6659e-06,
  -0.22226425,  0.26463549, -1.3411e-05, -3.8778e-06,
   3.29555337,  0.01560403, -8.7677e-07,
  13.77047379, 15.00431099, -1.9699e-07,
   0.55027472,  0.00011283, -1.1460e-05,
   0.00409688,  0.00011227, -1.1403e-05,
   0.00468337,  0.00466005,
//1987 Sep 23
2447061.63358261,   3.0,  -3.0,   4.0, 55.184, 55.65,
   0.04201295,  0.45559467,  1.0154e-05, -5.4973e-06,
   0.29572822, -0.25436283, -1.8880e-05,  3.2425e-06,
   0.17404810, -0.01560810, -1.8006e-07,
 226.83701717, 15.00475930, -3.8076e-07,
   0.56109358, -0.00009196, -1.0388e-05,
   0.01486192, -0.00009151, -1.0336e-05,
   0.00465969,  0.00463649,
//1988 Mar 18
2447238.58259684,   2.0,  -3.0,   3.0, 56.184, 55.94,
  -0.19468223,  0.50395754, -6.4779e-07, -8.1872e-06,
   0.37093231,  0.28034675, -1.9309e-05, -4.7596e-06,
  -0.91812876,  0.01579716,  6.0445e-08,
 207.96787569, 15.00425837,  6.0595e-07,
   0.53825742,  0.00006378, -1.2730e-05,
  -0.00786061,  0.00006347, -1.2666e-05,
   0.00469703,  0.00467364,
//1988 Sep 11
2447415.69755397,   5.0,  -4.0,   3.0, 56.184, 56.14,
  -0.11086277,  0.44259562, -5.8334e-06, -4.8599e-06,
  -0.47318095, -0.24311568, -4.1055e-06,  2.8363e-06,
   4.48111739, -0.01527447, -1.0946e-06,
 255.84449505, 15.00472442,  4.0789e-07,
   0.56850763, -0.00001323, -9.7368e-06,
   0.02223908, -0.00001316, -9.6883e-06,
   0.00464598,  0.00462284,
//1989 Mar 7
2447593.25602555,  18.0,  -2.0,   3.0, 56.184, 56.39,
  -0.59675011,  0.51151332,  2.2980e-05, -8.5294e-06,
   0.92568551,  0.27690776, -2.1724e-05, -4.8373e-06,
  -5.08024631,  0.01555584,  1.0359e-06,
  87.25233987, 15.00377785,  1.3834e-06,
   0.53674406, -0.00003365, -1.2985e-05,
  -0.00936647, -0.00003348, -1.2920e-05,
   0.00471024,  0.00468678,
//1989 Aug 31
2447769.73040060,   6.0,  -3.0,   2.0, 56.184, 56.63,
  -0.33567982,  0.45761249, -1.9563e-05, -5.3563e-06,
  -1.17003069, -0.23831228,  8.6643e-06,  2.9409e-06,
   8.64246863, -0.01444713, -2.0020e-06,
 269.90680308, 15.00434598,  1.0917e-06,
   0.56235064,  0.00007804, -1.0116e-05,
   0.01611279,  0.00007765, -1.0065e-05,
   0.00463289,  0.00460981,
//1990 Jan 26
2447918.31347122,  20.0,  -3.0,   2.0, 57.184, 56.90,
   0.56778511,  0.50742016, -5.0837e-05, -6.8600e-06,
  -0.79894921,  0.18643744,  1.6134e-04, -2.6639e-06,
 -18.62072431,  0.01014584,  4.4801e-06,
 116.84642011, 14.99911305,  2.7367e-06,
   0.55697236, -0.00013388, -1.1299e-05,
   0.01076099, -0.00013321, -1.1243e-05,
   0.00474887,  0.00472522,
//1990 Jul 22
2448094.62716797,   3.0,  -3.0,   3.0, 57.184, 57.25,
   0.19995057,  0.53828213, -6.6849e-05, -8.2311e-06,
   0.73352062, -0.16929638, -1.6639e-04,  2.7661e-06,
  20.34538120, -0.00779849, -4.5213e-06,
 223.39602740, 15.00091410,  1.8556e-06,
   0.53880904,  0.00010617, -1.1948e-05,
  -0.00731149,  0.00010565, -1.1889e-05,
   0.00460177,  0.00457885,
//1991 Jan 15
2448272.49573258,   0.0,  -4.0,   3.0, 58.184, 57.60,
   0.12669675,  0.49010639, -3.2993e-05, -5.6246e-06,
  -0.24713154,  0.14324532,  1.4566e-04, -1.7811e-06,
 -21.07115379,  0.00739146,  5.4619e-06,
 177.62878972, 14.99764192,  2.3248e-06,
   0.57169990, -0.00007536, -1.0146e-05,
   0.02541518, -0.00007498, -1.0096e-05,
   0.00475431,  0.00473064,
//1991 Jul 11
2448449.29653625,  19.0,  -3.0,   3.0, 58.184, 57.97,
  -0.06725452,  0.56713754, -3.6915e-05, -9.6116e-06,
   0.01212629, -0.13797723, -1.5290e-04,  2.4957e-06,
  22.09743437, -0.00522018, -5.1131e-06,
 103.63541374, 15.00005615,  1.4939e-06,
   0.53043799,  0.00002524, -1.2787e-05,
  -0.01564084,  0.00002511, -1.2724e-05,
   0.00459868,  0.00457578,
//1992 Jan 4
2448626.46223358,  23.0,  -3.0,   4.0, 58.184, 58.32,
  -0.12921846,  0.49348110, -3.0391e-05, -5.4794e-06,
   0.39099392,  0.10225838,  1.3206e-04, -1.2654e-06,
 -22.72167077,  0.00413210,  6.1896e-06,
 163.76997329, 14.99658295,  1.3470e-06,
   0.57505027,  0.00003213, -9.9141e-06,
   0.02874886,  0.00003197, -9.8647e-06,
   0.00475634,  0.00473266,
//1992 Jun 30
2448804.00789097,  12.0,  -3.0,   3.0, 58.184, 58.74,
  -0.23039281,  0.56738215, -3.8488e-06, -9.2066e-06,
  -0.72325016, -0.09407896, -1.2278e-04,  1.6722e-06,
  23.14090199, -0.00244503, -5.5511e-06,
 359.07891385, 14.99942686,  8.6761e-07,
   0.53387910, -0.00007127, -1.2416e-05,
  -0.01221687, -0.00007092, -1.2354e-05,
   0.00459843,  0.00457553,
//1992 Dec 24
2448980.52200485,   1.0,  -3.0,   2.0, 59.184, 59.10,
   0.12051979,  0.52160700, -3.9703e-05, -6.5409e-06,
   1.09276879,  0.06171783,  1.1410e-04, -8.7670e-07,
 -23.41921905,  0.00064265,  6.5145e-06,
 195.11341676, 14.99621244,  9.9686e-08,
   0.56435486,  0.00010116, -1.0726e-05,
   0.01810671,  0.00010066, -1.0673e-05,
   0.00475461,  0.00473093,
//1993 May 21
2449129.09739062,  14.0,  -2.0,   3.0, 59.184, 59.50,
  -0.30413148,  0.52511004,  4.2872e-05, -6.6711e-06,
   1.11016604,  0.05911719, -1.7388e-04, -6.9389e-07,
  20.25684665,  0.00822132, -4.5892e-06,
  30.85806672, 15.00062322, -1.7760e-06,
   0.55588205, -0.00010481, -1.0543e-05,
   0.00967644, -0.00010429, -1.0490e-05,
   0.00461953,  0.00459652,
//1993 Nov 13
2449305.40684086,  22.0,  -3.0,   2.0, 60.184, 59.87,
  -0.03945032,  0.56676372,  1.3357e-05, -9.2480e-06,
  -1.04917339, -0.09547210,  1.8792e-04,  1.4574e-06,
 -18.14668648, -0.01068719,  4.1275e-06,
 153.89949404, 14.99989829, -2.8946e-06,
   0.54058981,  0.00007179, -1.2703e-05,
  -0.00553991,  0.00007143, -1.2640e-05,
   0.00472565,  0.00470211,
//1994 May 10
2449483.21697263,  17.0,  -3.0,   4.0, 60.184, 60.30,
  -0.17341146,  0.49906292,  2.9556e-05, -5.6295e-06,
   0.38365142,  0.08693927, -1.1826e-04, -9.1452e-07,
  17.68613132,  0.01064192, -3.9944e-06,
  75.90597555, 15.00162070, -1.9566e-06,
   0.56693692, -0.00003184, -9.7624e-06,
   0.02067623, -0.00003169, -9.7138e-06,
   0.00463085,  0.00460779,
//1994 Nov 3
2449660.06951355,  14.0,  -3.0,   3.0, 61.184, 60.64,
   0.11256027,  0.56878259,  2.0711e-05, -9.6567e-06,
  -0.38557219, -0.12578036,  1.2328e-04,  2.0490e-06,
 -15.10090461, -0.01268595,  3.2620e-06,
  34.10152671, 15.00142102, -2.8011e-06,
   0.53662100, -0.00003135, -1.3030e-05,
  -0.00948892, -0.00003119, -1.2965e-05,
   0.00471339,  0.00468992,
//1995 Apr 29
2449837.23148688,  18.0,  -4.0,   3.0, 61.184, 61.11,
   0.29701721,  0.49877352, -7.0978e-07, -5.7865e-06,
  -0.27902139,  0.11401000, -7.4888e-05, -1.2591e-06,
  14.48232940,  0.01265913, -3.2712e-06,
  90.65514208, 15.00268217, -1.8078e-06,
   0.56509030,  0.00005580, -9.9784e-06,
   0.01883878,  0.00005552, -9.9287e-06,
   0.00464336,  0.00462024,
//1995 Oct 24
2450014.68993564,   5.0,  -4.0,   3.0, 61.184, 61.46,
   0.33003257,  0.54305162,  1.8119e-05, -8.2683e-06,
   0.27634685, -0.14411000,  5.2458e-05,  2.1111e-06,
 -11.58056668, -0.01419584,  2.4121e-06,
 258.92680658, 15.00274032, -2.3596e-06,
   0.54477738, -0.00011489, -1.2088e-05,
  -0.00137312, -0.00011432, -1.2028e-05,
   0.00470036,  0.00467695,
//1996 Apr 17
2450191.44319507,  23.0,  -3.0,   2.0, 62.184, 61.85,
   0.46805340,  0.52094171, -1.9405e-05, -7.0604e-06,
  -0.96886702,  0.14228961, -2.4483e-05, -1.8766e-06,
  10.83628993,  0.01419081, -2.5231e-06,
 165.15081328, 15.00361354, -1.4090e-06,
   0.55229939,  0.00010841, -1.1096e-05,
   0.00611154,  0.00010787, -1.1040e-05,
   0.00465648,  0.00463329,
//1996 Oct 12
2450369.08546271,  14.0,  -3.0,   3.0, 62.184, 62.14,
   0.29616871,  0.50603627,  1.4523e-05, -6.4350e-06,
   1.08322016, -0.15152179, -1.0202e-05,  1.8427e-06,
  -7.63950320, -0.01523369,  1.5470e-06,
  33.40553228, 15.00378185, -1.7698e-06,
   0.55937215, -0.00010672, -1.0689e-05,
   0.01314900, -0.00010619, -1.0636e-05,
   0.00468661,  0.00466327,
//1997 Mar 9
2450516.55891840,   1.0,  -2.0,   3.0, 62.184, 62.42,
  -0.50502318,  0.55430737,  1.3367e-05, -9.3432e-06,
   0.80381435,  0.17435854, -2.0391e-05, -2.8458e-06,
  -4.55016385,  0.01586202,  8.9917e-07,
 192.33589443, 15.00396222,  1.2592e-06,
   0.53691422,  0.00004861, -1.2956e-05,
  -0.00919715,  0.00004836, -1.2892e-05,
   0.00470880,  0.00468535,
//1997 Sep 2
2450693.50333627,   0.0,  -3.0,   3.0, 63.184, 62.74,
  -0.33188949,  0.48463467, -2.5651e-06, -5.4249e-06,
  -0.98140362, -0.14306034, -3.1208e-06,  1.5376e-06,
   7.98437668, -0.01483813, -1.8446e-06,
 180.05313437, 15.00450467,  1.0011e-06,
   0.56766527,  0.00002239, -9.7295e-06,
   0.02140094,  0.00002228, -9.6811e-06,
   0.00463496,  0.00461188,
//1998 Feb 26
2450871.22877970,  17.0,  -3.0,   4.0, 63.184, 63.07,
  -0.33883453,  0.55449576,  1.0267e-05, -9.1719e-06,
   0.15050644,  0.16113159,  4.9414e-05, -2.5820e-06,
  -8.60943181,  0.01521536,  1.7245e-06,
  71.77923825, 15.00313096,  1.9527e-06,
   0.53918232, -0.00005214, -1.2823e-05,
  -0.00694038, -0.00005188, -1.2759e-05,
   0.00472161,  0.00469809,
//1998 Aug 22
2451047.58831531,   2.0,  -3.0,   4.0, 63.184, 63.31,
  -0.12741752,  0.50677434, -2.6960e-05, -6.2784e-06,
  -0.24000635, -0.13235684, -5.1984e-05,  1.5704e-06,
  11.89284938, -0.01363701, -2.5923e-06,
 209.24638966, 15.00384820,  1.5199e-06,
   0.55812111,  0.00010754, -1.0384e-05,
   0.01190435,  0.00010700, -1.0332e-05,
   0.00462302,  0.00460000,
//1999 Feb 16
2451225.77405046,   7.0,  -4.0,   3.0, 64.184, 63.52,
   0.34196953,  0.53182096, -1.8253e-05, -7.5737e-06,
  -0.40032701,  0.13612878,  1.0495e-04, -1.8476e-06,
 -12.45960836,  0.01406560,  2.6272e-06,
 281.47988200, 15.00190881,  2.5086e-06,
   0.55227421, -0.00013244, -1.1614e-05,
   0.00608628, -0.00013178, -1.1556e-05,
   0.00473334,  0.00470976,
//1999 Aug 11
2451401.96121482,  11.0,  -3.0,   3.0, 64.184, 63.68,
   0.07005581,  0.54430362, -4.0611e-05, -8.0695e-06,
   0.50283800, -0.11849286, -1.1576e-04,  1.6896e-06,
  15.32734072, -0.01203498, -3.2567e-06,
 343.69030346, 15.00298255,  1.9055e-06,
   0.54249306,  0.00011683, -1.1678e-05,
  -0.00364585,  0.00011625, -1.1620e-05,
   0.00461301,  0.00459004,
//2000 Feb 5
2451580.03503251,  13.0,  -3.0,   2.0, 64.184, 63.86,
   0.32956559,  0.50568566, -2.0720e-05, -6.0429e-06,
  -1.18088658,  0.10520779,  1.5296e-04, -1.1700e-06,
 -16.02865041,  0.01232359,  3.6123e-06,
  11.51423780, 15.00039796,  2.8208e-06,
   0.56820712, -0.00009628, -1.0338e-05,
   0.02193982, -0.00009580, -1.0287e-05,
   0.00474337,  0.00471975,
//2000 Jul 1
2451727.31497362,  20.0,  -2.0,   2.0, 64.184, 63.98,
   0.28074277,  0.58385365, -1.0428e-05, -9.9570e-06,
  -1.27723310,  0.01061091, -9.2292e-05, -2.8998e-07,
  23.04426117, -0.00308376, -5.5886e-06,
 119.01594805, 14.99953141,  9.4983e-07,
   0.53008105, -0.00001814, -1.2810e-05,
  -0.01599601, -0.00001805, -1.2747e-05,
   0.00459821,  0.00457531,
//2000 Jul 31
2451756.59314353,   2.0,  -2.0,   2.0, 64.184, 63.98,
   0.06577264,  0.57378112, -3.1466e-05, -9.6900e-06,
   1.22254826, -0.09595570, -1.9001e-04,  1.5448e-06,
  18.21852892, -0.01008576, -3.8441e-06,
 208.41379299, 15.00197748,  2.0636e-06,
   0.53161969,  0.00005064, -1.2706e-05,
  -0.01446506,  0.00005038, -1.2642e-05,
   0.00460562,  0.00458268,
//2000 Dec 25
2451904.23329589,  18.0,  -3.0,   2.0, 64.184, 64.09,
   0.27835505,  0.50631284, -8.4214e-06, -5.7561e-06,
   1.12071810, -0.03355852,  1.1197e-04,  4.9115e-07,
 -23.37237867,  0.00144918,  6.5108e-06,
  89.91230853, 14.99619539,  3.8451e-07,
   0.57311631,  0.00005135, -1.0049e-05,
   0.02682453,  0.00005110, -9.9986e-06,
   0.00475540,  0.00473171,
//2001 Jun 21
2452082.00331255,  12.0,  -3.0,   3.0, 64.184, 64.21,
   0.01035507,  0.56538600,  2.9197e-05, -8.8620e-06,
  -0.57182973,  0.05512570, -1.3392e-04, -9.8179e-07,
  23.43976667, -0.00018302, -5.6511e-06,
 359.56452734, 14.99919302,  2.0604e-07,
   0.53699582, -0.00009439, -1.2117e-05,
  -0.00911568, -0.00009392, -1.2056e-05,
   0.00460053,  0.00457762,
//2001 Dec 14
2452258.37015312,  21.0,  -3.0,   3.0, 64.184, 64.285,
   0.12366933,  0.52894202,  1.5182e-06, -6.9829e-06,
   0.39464470, -0.08130247,  1.4546e-04,  1.2070e-06,
 -23.25179956, -0.00205529,  6.3417e-06,
 136.28274401, 14.99641242, -9.3294e-07,
   0.55955314,  0.00011852, -1.1102e-05,
   0.01332891,  0.00011793, -1.1047e-05,
   0.00475089,  0.00472723,
//2002 Jun 10
2452436.48983869,   0.0,  -4.0,   3.0, 64.184, 64.415,
   0.09391917,  0.52745424,  4.0289e-05, -6.9374e-06,
   0.21901830,  0.09319092, -1.5939e-04, -1.3636e-06,
  23.05546620,  0.00279431, -5.4898e-06,
 180.13783559, 14.99926049, -6.1416e-07,
   0.55168072, -0.00012314, -1.0795e-05,
   0.00549607, -0.00012253, -1.0741e-05,
   0.00460544,  0.00458251,
//2002 Dec 4
2452612.81406946,   8.0,  -4.0,   3.0, 64.184, 64.455,
   0.18614704,  0.55325017,  1.5483e-05, -8.7049e-06,
  -0.35446295, -0.13091308,  1.8071e-04,  2.2186e-06,
 -22.22649922, -0.00529656,  5.7805e-06,
 302.48504503, 14.99727171, -1.9553e-06,
   0.54418991,  0.00008340, -1.2481e-05,
  -0.00195779,  0.00008299, -1.2419e-05,
   0.00474379,  0.00472017,
//2003 May 31 - Elements by Fred Espenak
2452790.67, 4, -3.0, 3.0, 64.184, 64.7,
 -0.3238544, 0.4939022, 0.0000545,-0.0000056,
  0.9452118, 0.1263288,-0.0001691,-0.0000016,
 21.8459854, 0.0057463,-0.0000051,
240.614990, 14.999788, -0.000001,
  0.5644051,-0.0000530,-0.0000098,
  0.0181570,-0.0000527,-0.0000098,
  0.0046126, 0.0045896,
// My elements were -
//2452790.67317569,   4.0,  -3.0,   3.0, 64.184, 64.56,
//  -0.32385385,  0.49390126,  5.4513e-05, -5.6274e-06,
//   0.94521009,  0.12632859, -1.6912e-04, -1.5776e-06,
//  21.84598698,  0.00574649, -5.0848e-06,
// 240.61499325, 14.99978787, -1.3392e-06,
//   0.56440907, -0.00005300, -9.8341e-06,
//   0.01816101, -0.00005273, -9.7851e-06,
//   0.00461266,  0.00458969,

//2003 Nov 23
2452967.45163893,  23.0,  -3.0,   2.0, 64.184, 64.564,
  -0.19795259,  0.55689742,  5.7054e-05, -9.4309e-06,
  -0.94790142, -0.17392466,  1.9895e-04,  3.1368e-06,
 -20.40538643, -0.00817705,  4.9664e-06,
 168.39867318, 14.99853070, -2.5443e-06,
   0.53735189, -0.00000323, -1.3115e-05,
  -0.00876173, -0.00000322, -1.3049e-05,
   0.00473484,  0.00471126,
//2004 Apr 19
2453115.06603149,  14.0,  -3.0,   2.0, 64.184, 64.635,
   0.69319842,  0.46464909, -1.0112e-05, -5.4941e-06,
  -0.92219396,  0.22851952, -2.5931e-05, -2.8822e-06,
  11.41963600,  0.01377343, -2.6583e-06,
  30.25052120, 15.00335497, -1.4804e-06,
   0.56265111,  0.00007811, -1.0232e-05,
   0.01641171,  0.00007773, -1.0181e-05,
   0.00465501,  0.00463182,
//2004 Oct 14
2453292.62526504,   3.0,  -3.0,   3.0, 64.184, 64.645,
   0.47698101,  0.48947229,  1.5876e-05, -7.0049e-06,
   0.91833635, -0.25634456, -6.1814e-06,  3.8385e-06,
  -8.23845959, -0.01485915,  1.6887e-06,
 228.50191245, 15.00359788, -1.8735e-06,
   0.54827005, -0.00011405, -1.1669e-05,
   0.00210218, -0.00011349, -1.1611e-05,
   0.00468820,  0.00466486,
//2005 Apr 8
2453469.35891655,  21.0,  -4.0,   3.0, 64.184, 64.763,
   0.35023589,  0.48577626, -1.0109e-05, -6.8462e-06,
  -0.20743079,  0.25757581, -3.6656e-05, -3.8267e-06,
   7.48629201,  0.01489852, -1.7476e-06,
 134.57572643, 15.00404188, -8.7592e-07,
   0.54857194,  0.00010693, -1.1518e-05,
   0.00240261,  0.00010639, -1.1461e-05,
   0.00466870,  0.00464545,
//2005 Oct 3
2453646.93943480,  11.0,  -4.0,   3.0, 64.184, 64.790,
   0.36604806,  0.45547905,  9.9288e-06, -5.4399e-06,
   0.17581950, -0.25080653,  7.4744e-06,  3.1692e-06,
  -4.09223846, -0.01549049,  6.9733e-07,
 347.75478987, 15.00434049, -1.1287e-06,
   0.56268518, -0.00010220, -1.0345e-05,
   0.01644556, -0.00010169, -1.0294e-05,
   0.00467412,  0.00465084,
//2006 Mar 29
2453823.92526059,  10.0,  -3.0,   3.0, 65.184, 64.914,
  -0.28991743,  0.50608800,  1.8140e-05, -8.2819e-06,
   0.27903895,  0.27899188, -3.8634e-05, -4.7690e-06,
   3.39884148,  0.01555752, -8.3822e-07,
 328.79371010, 15.00436847, -1.3209e-07,
   0.53702564,  0.00006441, -1.2748e-05,
  -0.00908622,  0.00006409, -1.2684e-05,
   0.00468267,  0.00465935,
//2006 Sep 22
2454000.98699311,  12.0,  -4.0,   3.0, 65.184, 65.0,
  -0.06064556,  0.44051005,  2.8135e-06, -4.8282e-06,
  -0.43147261, -0.24612810,  1.5195e-05,  2.8667e-06,
   0.26179335, -0.01562140, -2.6156e-07,
   1.81183229, 15.00473215, -3.4226e-07,
   0.56944438, -0.00000793, -9.7489e-06,
   0.02317113, -0.00000789, -9.7003e-06,
   0.00465938,  0.00463618,
//2007 Mar 19
2454178.60621914,   3.0,  -3.0,   2.0, 65.2, 65.2,
  -0.28987252,  0.50867428,  2.1838e-05, -8.4585e-06,
   1.06556321,  0.28123668, -5.3530e-05, -4.8981e-06,
  -0.74650519,  0.01579541,  8.9965e-08,
 223.00160757, 15.00427666,  6.5872e-07,
   0.53624809, -0.00005461, -1.2928e-05,
  -0.00985993, -0.00005434, -1.2863e-05,
   0.00469673,  0.00467334,
//2007 Sep 11
2454355.02250344,  13.0,  -3.0,   2.0, 65.4, 65.4,
  -0.33108847,  0.45388385, -9.8814e-06, -5.3472e-06,
  -1.10171286, -0.24807694,  2.7761e-05,  3.0783e-06,
   4.58239241, -0.01524352, -1.1905e-06,
  15.81616939, 15.00475312,  4.1687e-07,
   0.56241172,  0.00008297, -1.0186e-05,
   0.01617353,  0.00008256, -1.0136e-05,
   0.00464494,  0.00462181,
//2008 Feb 7 (5MCSE)
2454503.664010,   4.0,  -4.0,   4.0,  65.6, 65.6,
   0.41244400,  0.49431279, -0.00004200, -0.00000660,
  -0.86425298,  0.21449891,  0.00013950, -0.00000302,
 -15.51263046,  0.01237700,  0.00000300,
 236.47749329, 15.00059891,  0.00000000,
   0.55741698, -0.00012470, -0.00001120,
   0.01122300, -0.00012400, -0.00001120,
   0.00474170,  0.00471810,
/*2454503.66400805,   4.0,  -3.0,   3.0, 65.6, 65.6,
   0.41246782,  0.49431283, -4.2002e-05, -6.6050e-06,
  -0.86424480,  0.21449882,  1.3946e-04, -3.0209e-06,
 -15.51263411,  0.01237704,  3.4793e-06,
 236.47483977, 15.00059871,  2.7248e-06,
   0.55744087, -0.00012466, -1.1215e-05,
   0.01122719, -0.00012404, -1.1160e-05,
   0.00474181,  0.00471819,*/
//2008 Aug 1 (5MCSE)
2454679.932087,  10.0,  -4.0,   4.0, 65.7, 65.7,
   0.10176700,  0.52857709, -0.00006350, -0.00000814,
   0.85062701, -0.20252250, -0.00015120,  0.00000331,
  17.86754036, -0.01012100, -0.00000400,
 328.42578125, 15.00201225,  0.00000000,
   0.53823203,  0.00011110, -0.00001200,
  -0.00786600,  0.00011050, -0.00001200,
   0.00460650,  0.00458360,
/*2454679.93208507,  10.0,  -2.0,   3.0, 65.8, 65.8,
   0.10179438,  0.52857707, -6.3429e-05, -8.1294e-06,
   0.85061805, -0.20252265, -1.5122e-04,  3.3091e-06,
  17.86754027, -0.01012085, -3.8475e-06,
 328.42255150, 15.00201163,  1.9617e-06,
   0.53825586,  0.00011109, -1.2032e-05,
  -0.00786193,  0.00011054, -1.1972e-05,
   0.00460662,  0.00458368,*/
//2009 Jan 26
2454857.83315205,   8.0,  -4.0,   4.0, 65.8, 65.8,
   0.09962367,  0.47819690, -3.5254e-05, -5.4417e-06,
  -0.26380020,  0.17630750,  1.2549e-04, -2.1592e-06,
 -18.64789991,  0.01014513,  4.5884e-06,
 296.85945783, 14.99901671,  2.7509e-06,
   0.57193237, -0.00006966, -1.0105e-05,
   0.02564650, -0.00006932, -1.0055e-05,
   0.00474988,  0.00472623,
//2009 Jul 22
2455034.60861538,   3.0,  -4.0,   3.0, 65.9, 65.9,
   0.23998829,  0.55639545, -5.7622e-05, -9.4305e-06,
  -0.00328382, -0.17745794, -1.3437e-04,  3.1760e-06,
  20.26424248, -0.00787358, -4.5592e-06,
 223.38413727, 15.00100234,  1.9276e-06,
   0.53045030,  0.00000631, -1.2808e-05,
  -0.01562861,  0.00000628, -1.2744e-05,
   0.00460142,  0.00457850,
//2010 Jan 15
2455211.79697945,   7.0,  -3.0,   4.0, 66.10, 66.08,
  -0.17324368,  0.48452041, -3.7104e-05, -5.3740e-06,
   0.36640390,  0.14049202,  1.1703e-04, -1.7037e-06,
 -21.12929902,  0.00730746,  5.5662e-06,
 282.66671694, 14.99759040,  2.2504e-06,
   0.57469972,  0.00003723, -9.9292e-06,
   0.02840006,  0.00003704, -9.8798e-06,
   0.00475458,  0.00473090,
//2010 Jul 11
2455389.31571339,  20.0,  -3.0,   2.0, 66.18, 66.24,
   0.07409976,  0.55725144, -2.7607e-05, -8.9672e-06,
  -0.71703005, -0.13665789, -1.1211e-04,  2.3571e-06,
  22.03570187, -0.00534120, -5.1822e-06,
 118.60980203, 15.00006747,  1.5700e-06,
   0.53444635, -0.00009080, -1.2358e-05,
  -0.01165245, -0.00009035, -1.2297e-05,
   0.00459887,  0.00457597,
//2011 Jan 4
2455565.86923811,   9.0,  -3.0,   3.0, 66.3, 66.3,
  -0.14059768,  0.51627610, -4.1738e-05, -6.5135e-06,
   1.05582511,  0.10513873,  1.0642e-04, -1.4488e-06,
 -22.74122485,  0.00406206,  6.2555e-06,
 313.80659648, 14.99663211,  1.3122e-06,
   0.56361584,  0.00010976, -1.0790e-05,
   0.01737137,  0.00010922, -1.0736e-05,
   0.00475578,  0.00473209,
//2011 Jun 1
2455714.38701605,  21.0,  -2.0,   3.0, 66.5, 66.5,
  -0.20262891,  0.52627447,  2.9753e-05, -6.6427e-06,
   1.20555786,  0.02219590, -1.9311e-04, -2.1783e-07,
  22.09196989,  0.00551956, -5.1045e-06,
 135.53351019, 14.99974374, -1.3190e-06,
   0.55623817, -0.00010256, -1.0459e-05,
   0.01003081, -0.00010205, -1.0407e-05,
   0.00461123,  0.00458827,
//2011 Jul 1
2455743.86076494,   9.0,  -2.0,   1.0, 66.5, 66.5,
  -0.05926928,  0.53551125, -3.9778e-06, -7.3702e-06,
  -1.50203757, -0.08818307, -8.3310e-05,  1.3538e-06,
  23.12097808, -0.00254033, -5.6358e-06,
 314.04869688, 14.99935764,  9.1424e-07,
   0.54779315, -0.00012719, -1.1078e-05,
   0.00162788, -0.00012656, -1.1023e-05,
   0.00459904,  0.00457613,
//2011 Nov 25
2455890.76486423,   6.0,  -2.0,   3.0, 66.6, 66.6,
  -0.31001288,  0.57290629,  2.0522e-05, -9.3908e-06,
  -1.02766422, -0.05788106,  2.1051e-04,  8.3169e-07,
 -20.67681171, -0.00810005,  5.0324e-06,
 273.29543356, 14.99839656, -2.6365e-06,
   0.54062741,  0.00008218, -1.2772e-05,
  -0.00550252,  0.00008177, -1.2708e-05,
   0.00473611,  0.00471252,
//2012 May 20
2456068.49575692,   0.0,  -4.0,   3.0, 66.8, 66.8,
  -0.00223737,  0.50318274,  1.8326e-05, -5.6579e-06,
   0.48552878,  0.05605376, -1.4106e-04, -5.6333e-07,
  20.22055712,  0.00827127, -4.6618e-06,
 180.85286256, 15.00057727, -1.7940e-06,
   0.56651110, -0.00003124, -9.7295e-06,
   0.02025256, -0.00003108, -9.6810e-06,
   0.00462052,  0.00459751,
//2012 Nov 13
2456245.42563565,  22.0,  -3.0,   3.0, 66.9, 66.9,
  -0.18370187,  0.57434055,  3.5046e-05, -9.7309e-06,
  -0.34676909, -0.09407004,  1.4836e-04,  1.5072e-06,
 -18.24755452, -0.01060200,  4.2545e-06,
 153.89453798, 14.99986749, -2.8707e-06,
   0.53746937, -0.00002289, -1.3034e-05,
  -0.00864481, -0.00002277, -1.2969e-05,
   0.00472560,  0.00470207,
//2013 May 10
2456422.51828730,   0.0,  -3.0,   4.0, 67.1, 67.1,
  -0.17514550,  0.50528871,  1.4447e-05, -5.9078e-06,
  -0.30429306,  0.08888988, -9.5845e-05, -9.6959e-07,
  17.60548298,  0.01070052, -4.0267e-06,
 180.90058437, 15.00166099, -1.9976e-06,
   0.56369556,  0.00007880, -1.0005e-05,
   0.01745101,  0.00007840, -9.9554e-06,
   0.00463136,  0.00460829,
//2013 Nov 3
2456600.03305368,  13.0,  -3.0,   3.0, 67.2, 67.2,
   0.18323015,  0.54694952,  2.8233e-05, -8.2576e-06,
   0.29471111, -0.12007563,  7.9039e-05,  1.7286e-06,
 -15.20966412, -0.01263576,  3.4025e-06,
  19.10831319, 15.00132527, -2.7935e-06,
   0.54630608, -0.00011210, -1.2044e-05,
   0.00014792, -0.00011154, -1.1984e-05,
   0.00471376,  0.00469029,
//2014 Apr 29
2456776.75315480,   6.0,  -3.0,   3.0, 67.5, 67.5,
   0.18519846,  0.52826848, -4.9913e-06, -7.2438e-06,
  -0.98351727,  0.12211305, -4.7318e-05, -1.6190e-06,
  14.44979979,  0.01265839, -3.3265e-06,
 270.65425210, 15.00275600, -1.8355e-06,
   0.55056146,  0.00011865, -1.1154e-05,
   0.00438229,  0.00011806, -1.1098e-05,
   0.00464335,  0.00462023,
//2014 Oct 23
2456954.40670062,  22.0,  -3.0,   2.0, 67.56, 67.56,
   0.40257464,  0.50848578,  1.6032e-05, -6.3928e-06,
   1.02156376, -0.13553270,  1.7976e-05,  1.6225e-06,
 -11.61852423, -0.01419850,  2.5032e-06,
 153.92974239, 15.00265152, -2.3815e-06,
   0.56102100, -0.00011083, -1.0641e-05,
   0.01478960, -0.00011028, -1.0588e-05,
   0.00470062,  0.00467721,
//2015 Mar 20
2457101.90748310,  10.0,  -3.0,   2.0, 67.8, 67.8,
  -0.16825180,  0.55374150,  5.8012e-06, -9.3586e-06,
   0.93907130,  0.17864808, -5.4126e-05, -2.9270e-06,
  -0.21265797,  0.01603605, -2.0869e-08,
 328.10588164, 15.00441493,  5.2505e-07,
   0.53595511,  0.00002650, -1.2955e-05,
  -0.01015145,  0.00002636, -1.2890e-05,
   0.00469512,  0.00467173,
//2015 Sep 13
2457278.78841324,   7.0,  -3.0,   3.0, 67.9, 67.9,
  -0.29285854,  0.48214203,  1.6656e-06, -5.4049e-06,
  -1.06144144, -0.15181828,  2.2638e-05,  1.6376e-06,
   3.89024278, -0.01556351, -1.0471e-06,
 285.97633352, 15.00485030,  3.0003e-07,
   0.56828783,  0.00002582, -9.7576e-06,
   0.02202037,  0.00002569, -9.7090e-06,
   0.00464739,  0.00462424,
//2016 Mar 9
2457456.58216618,   2.0,  -3.0,   3.0, 68.2, 68.2,
  -0.06248009,  0.55027690,  4.6491e-06, -9.0544e-06,
   0.25385041,  0.17212329,  1.7127e-05, -2.7494e-06,
  -4.37971515,  0.01588556,  7.6047e-07,
 207.37260980, 15.00397123,  1.2439e-06,
   0.53889131, -0.00007038, -1.2751e-05,
  -0.00722991, -0.00007003, -1.2687e-05,
   0.00470875,  0.00468530,
//2016 Sep 1
2457632.88057532,   9.0,  -3.0,   4.0, 68.4, 68.4,
  -0.16135593,  0.50406351, -2.1358e-05, -6.3028e-06,
  -0.29966923, -0.14815212, -2.5850e-05,  1.7809e-06,
   8.06329797, -0.01480240, -1.8107e-06,
 315.03265777, 15.00454499,  9.5627e-07,
   0.55795211,  0.00011155, -1.0467e-05,
   0.01173616,  0.00011099, -1.0415e-05,
   0.00463402,  0.00461095,
//2017 Feb 26
2457811.12120967,  15.0,  -3.0,   3.0, 68.6, 68.6,
   0.17598144,  0.52535626, -6.1957e-06, -7.4107e-06,
  -0.42554049,  0.15325409,  7.9222e-05, -2.0748e-06,
  -8.49164193,  0.01526081,  1.6165e-06,
  41.80067287, 15.00308589,  1.9255e-06,
   0.55249372, -0.00012569, -1.1522e-05,
   0.00630473, -0.00012506, -1.1464e-05,
   0.00472198,  0.00469847,
//2017 Aug 21
2457987.26851770,  18.0,  -3.0,   4.0, 68.8, 68.8,
  -0.12952891,  0.54064257, -2.9314e-05, -8.0871e-06,
   0.48540424, -0.14163995, -9.0489e-05,  2.0515e-06,
  11.86695557, -0.01362157, -2.4939e-06,
  89.24772986, 15.00393779,  1.5070e-06,
   0.54211678,  0.00012407, -1.1776e-05,
  -0.00402028,  0.00012345, -1.1717e-05,
   0.00462230,  0.00459928,
//2018 Feb 15
2458165.36982555,  21.0,  -3.0,   2.0, 70.8, 70.8,
   0.36366240,  0.49905220, -2.1208e-05, -5.9204e-06,
  -1.15753386,  0.12833364,  1.2676e-04, -1.4397e-06,
 -12.46403776,  0.01408048,  2.5793e-06,
 131.48354852, 15.00182316,  2.4935e-06,
   0.56828094, -0.00009227, -1.0276e-05,
   0.02201329, -0.00009181, -1.0224e-05,
   0.00473410,  0.00471052,
//2018 Jul 13
2458312.62657166,   3.0,  -2.0,   2.0, 71.0, 71.0,
  -0.09923430,  0.58281464, -1.3175e-06, -9.9266e-06,
  -1.35077315, -0.03329333, -7.7033e-05,  4.6955e-07,
  21.84531277, -0.00593743, -5.2098e-06,
 223.57409366, 15.00024103,  1.6683e-06,
   0.53019167, -0.00001183, -1.2803e-05,
  -0.01588594, -0.00001177, -1.2739e-05,
   0.00459887,  0.00457596,
//2018 Aug 11
2458341.90795862,  10.0,  -2.0,   2.0, 71.0, 71.0,
   0.36755146,  0.56849586, -4.7730e-05, -9.6206e-06,
   1.09391031, -0.12629345, -1.5985e-04,  2.0632e-06,
  15.21672931, -0.01207630, -3.1222e-06,
 328.69937907, 15.00307856,  1.8777e-06,
   0.53172152,  0.00003379, -1.2752e-05,
  -0.01436375,  0.00003362, -1.2689e-05,
   0.00461273,  0.00458976,
//2019 Jan 6
2458489.57126546,   2.0,  -3.0,   2.0, 71.2, 71.2,
   0.12841544,  0.50823842, -1.6200e-05, -5.8198e-06,
   1.14402672,  0.00842363,  1.0355e-04, -1.0891e-09,
 -22.54492271,  0.00484782,  6.1837e-06,
 208.61903416, 14.99673656,  1.5543e-06,
   0.57272607,  0.00005746, -1.0083e-05,
   0.02643623,  0.00005717, -1.0033e-05,
   0.00475629,  0.00473260,
//2019 Jul 2
2458667.30841597,  19.0,  -3.0,   3.0, 71.4, 71.4,
  -0.21557992,  0.56620867,  2.7397e-05, -8.7884e-06,
  -0.65071217,  0.01063996, -1.2724e-04, -2.6839e-07,
  23.01294960, -0.00318702, -5.4959e-06,
 103.98380973, 14.99950489,  1.0786e-06,
   0.53765464, -0.00008982, -1.2035e-05,
  -0.00846013, -0.00008937, -1.1975e-05,
   0.00459846,  0.00457556,
//2019 Dec 26
2458843.72144336,   5.0,  -3.0,   4.0, 71.6, 71.6,
  -0.14036172,  0.53561033, -1.4587e-06, -7.1495e-06,
   0.42407427, -0.03665511,  1.4576e-04,  6.0433e-07,
 -23.37347344,  0.00140653,  6.4237e-06,
 254.94106599, 14.99626976,  3.2777e-07,
   0.55891113,  0.00012839, -1.1178e-05,
   0.01269010,  0.00012775, -1.1122e-05,
   0.00475485,  0.00473117,
//2020 Jun 21
2459021.77864610,   7.0,  -4.0,   3.0, 71.8, 71.8,
   0.15431480,  0.53115450,  2.5862e-05, -6.9214e-06,
   0.13640723,  0.05138710, -1.6095e-04, -7.9105e-07,
  23.43567165, -0.00023279, -5.5899e-06,
 284.53991805, 14.99910960,  2.4191e-07,
   0.55234159, -0.00012230, -1.0710e-05,
   0.00615367, -0.00012169, -1.0657e-05,
   0.00460097,  0.00457806,
//2020 Dec 14
2459198.17684016,  16.0,  -3.0,   3.0, 72.0, 72.0,
  -0.18176793,  0.56335677,  2.1645e-05, -8.9561e-06,
  -0.26964970, -0.08581217,  1.8840e-04,  1.5035e-06,
 -23.25776442, -0.00198600,  6.2383e-06,
  61.27031123, 14.99649666, -8.5935e-07,
   0.54388567,  0.00009702, -1.2556e-05,
  -0.00226052,  0.00009654, -1.2494e-05,
   0.00475029,  0.00472663,
//2021 Jun 10
2459375.94660064,  11.0,  -3.0,   3.0, 72.2, 72.2,
  -0.01865130,  0.50122892,  3.4198e-05, -5.7060e-06,
   0.92611075,  0.08877646, -1.7970e-04, -1.1324e-06,
  23.04228500,  0.00284114, -5.4347e-06,
 345.13114573, 14.99919895, -6.6366e-07,
   0.56440378, -0.00005512, -9.7954e-06,
   0.01815576, -0.00005484, -9.7466e-06,
   0.00460603,  0.00458309,
//2021 Dec 4
2459552.81571159,   8.0,  -3.0,   2.0, 72.4, 72.4,
   0.02526544,  0.56830271,  3.9104e-05, -9.6549e-06,
  -0.98367128, -0.13151418,  2.2130e-04,  2.4090e-06,
 -22.27472064, -0.00517795,  5.7012e-06,
 302.45623511, 14.99727930, -1.8600e-06,
   0.53782871, -0.00001604, -1.3132e-05,
  -0.00828731, -0.00001596, -1.3066e-05,
   0.00474351,  0.00471989,
//2022 Apr 30
2459700.36291809,  21.0,  -3.0,   2.0, 72.6, 72.6,
   0.61813062,  0.47531473, -1.5148e-06, -5.6843e-06,
  -1.02807005,  0.20964051, -4.3172e-05, -2.6824e-06,
  14.97104370,  0.01216706, -3.4759e-06,
 135.70940956, 15.00246788, -1.8607e-06,
   0.56109693,  0.00008474, -1.0272e-05,
   0.01486530,  0.00008432, -1.0221e-05,
   0.00464210,  0.00461898,
//2022 Oct 25
2459877.95925436,  11.0,  -3.0,   3.0, 72.8, 72.8,
   0.45485224,  0.49554945,  2.7634e-05, -7.0225e-06,
   0.96874978, -0.23958748,  1.6762e-05,  3.5623e-06,
 -12.17347503, -0.01374551,  2.6599e-06,
 348.98566709, 15.00242985, -2.4608e-06,
   0.54990346, -0.00011520, -1.1615e-05,
   0.00372742, -0.00011463, -1.1557e-05,
   0.00470198,  0.00467856,
//2023 Apr 20
2460054.67911509,   4.0,  -3.0,   4.0, 73.0, 73.0,
   0.02690837,  0.49501814,  1.3581e-05, -7.0533e-06,
  -0.42734403,  0.24419927, -4.9410e-05, -3.6706e-06,
  11.41178686,  0.01374089, -2.5821e-06,
 240.24565340, 15.00341828, -1.4668e-06,
   0.54682783,  0.00012161, -1.1571e-05,
   0.00066722,  0.00012101, -1.1513e-05,
   0.00465503,  0.00463184,
//2023 Oct 14
2460232.25046491,  18.0,  -3.0,   3.0, 73.3, 73.3,
   0.16971115,  0.45855319,  2.7803e-05, -5.4280e-06,
   0.33483641, -0.24136705,  2.4053e-05,  3.0302e-06,
  -8.24418895, -0.01488811,  1.6152e-06,
  93.50385617, 15.00352989, -1.8491e-06,
   0.56433603, -0.00008907, -1.0309e-05,
   0.01808814, -0.00008863, -1.0257e-05,
   0.00468827,  0.00466492,
//2024 Apr 8
2460409.26283562,  18.0,  -3.0,   3.0, 73.5, 73.5,
  -0.31818941,  0.51171158,  3.2613e-05, -8.4156e-06,
   0.21979441,  0.27095897, -5.9436e-05, -4.6586e-06,
   7.58619838,  0.01484435, -1.7029e-06,
  89.59258886, 15.00408332, -8.1636e-07,
   0.53583722,  0.00006179, -1.2761e-05,
  -0.01026868,  0.00006148, -1.2698e-05,
   0.00466833,  0.00464509,
//2024 Oct 2
2460586.28209278,  19.0,  -4.0,   3.0, 73.7, 73.7,
  -0.06798750,  0.44161699,  1.3614e-05, -4.8298e-06,
  -0.36319631, -0.24356307,  3.3928e-05,  2.8348e-06,
  -3.98724590, -0.01551079,  6.0827e-07,
 107.73172293, 15.00433186, -1.1039e-06,
   0.57037349, -0.00000017, -9.7653e-06,
   0.02409558, -0.00000017, -9.7167e-06,
   0.00467347,  0.00465020,
//2025 Mar 29
2460763.95041224,  11.0,  -3.0,   2.0, 73.9, 73.9,
  -0.40281190,  0.50941220,  4.1455e-05, -8.4394e-06,
   0.96572607,  0.27883484, -7.2268e-05, -4.8411e-06,
   3.56601578,  0.01553849, -8.0868e-07,
 343.83151782, 15.00436684, -7.5904e-08,
   0.53578968, -0.00005328, -1.2864e-05,
  -0.01031602, -0.00005302, -1.2800e-05,
   0.00468239,  0.00465907,
//2025 Sep 21
2460940.32157121,  20.0,  -3.0,   2.0, 74.1, 74.1,
  -0.39001106,  0.45315927,  3.1445e-06, -5.3867e-06,
  -1.00185996, -0.25216335,  4.5634e-05,  3.1554e-06,
   0.36471686, -0.01559954, -3.5446e-07,
 121.78099977, 15.00477229, -3.1959e-07,
   0.56251698,  0.00009090, -1.0263e-05,
   0.01627823,  0.00009045, -1.0212e-05,
   0.00465839,  0.00463519,
//2026 Feb 17
2461089.00908964,  12.0,  -3.0,   3.0, 74.3, 74.3,
   0.32201946,  0.48272233, -3.1474e-05, -6.3667e-06,
  -0.92694737,  0.23553928,  1.1684e-04, -3.2666e-06,
 -11.87929985,  0.01404900,  2.4397e-06,
 356.51255120, 15.00198376,  2.3769e-06,
   0.55774340, -0.00011808, -1.1124e-05,
   0.01152824, -0.00011749, -1.1069e-05,
   0.00473212,  0.00470856,
//2026 Aug 12
2461265.24103342,  18.0,  -3.0,   3.0, 74.5, 74.5,
   0.47558114,  0.51892500, -7.7303e-05, -8.0413e-06,
   0.77115941, -0.23016811, -1.2462e-04,  3.7680e-06,
  14.79667199, -0.01206486, -3.0984e-06,
  88.74527931, 15.00309008,  1.7782e-06,
   0.53797895,  0.00009394, -1.2120e-05,
  -0.00813748,  0.00009347, -1.2060e-05,
   0.00461413,  0.00459115,
//2027 Feb 6
2461443.16721360,  16.0,  -4.0,   4.0, 74.7, 74.7,
   0.11174255,  0.46649510, -3.3711e-05, -5.2683e-06,
  -0.27327066,  0.20318555,  1.0250e-04, -2.4565e-06,
 -15.54794207,  0.01238295,  3.5835e-06,
  56.48994462, 15.00050940,  2.7466e-06,
   0.57195207, -0.00006532, -1.0060e-05,
   0.02566613, -0.00006500, -1.0010e-05,
   0.00474266,  0.00471904,
//2027 Aug 2
2461619.92210285,  10.0,  -3.0,   3.0, 74.9, 74.9,
  -0.01969843,  0.54471228, -4.4634e-05, -9.2210e-06,
   0.16003945, -0.21115834, -1.2172e-04,  3.7574e-06,
  17.76247376, -0.01018110, -3.8753e-06,
 328.41892433, 15.00209584,  2.0410e-06,
   0.53062016,  0.00001381, -1.2829e-05,
  -0.01545961,  0.00001374, -1.2765e-05,
   0.00460646,  0.00458352,
//2028 Jan 26
2461797.13122993,  15.0,  -3.0,   4.0, 75.1, 75.1,
  -0.20521515,  0.47425698, -3.9013e-05, -5.2637e-06,
   0.34029821,  0.17385874,  9.6844e-05, -2.0868e-06,
 -18.72824653,  0.01007411,  4.6950e-06,
  41.88722016, 14.99896267,  2.7102e-06,
   0.57414101,  0.00004203, -9.9439e-06,
   0.02784414,  0.00004182, -9.8944e-06,
   0.00475017,  0.00472651,
//2028 Jul 22
2461974.62267426,   3.0,  -3.0,   3.0, 75.3, 75.3,
  -0.15433459,  0.54498909, -2.1467e-05, -8.6787e-06,
  -0.58644260, -0.17460850, -1.0208e-04,  2.9540e-06,
  20.18231234, -0.00797363, -4.6214e-06,
 223.37434756, 15.00101676,  1.9906e-06,
   0.53526050, -0.00008587, -1.2301e-05,
  -0.01084236, -0.00008544, -1.2239e-05,
   0.00460163,  0.00457871,
//2029 Jan 14
2462151.21790522,  17.0,  -2.0,   3.0, 75.5, 75.5,
  -0.40737014,  0.50815259, -3.9295e-05, -6.4528e-06,
   0.98107039,  0.14552828,  9.2139e-05, -1.9877e-06,
 -21.16300820,  0.00724073,  5.6410e-06,
  72.68831699, 14.99763133,  2.2251e-06,
   0.56268986,  0.00011889, -1.0851e-05,
   0.01645001,  0.00011830, -1.0797e-05,
   0.00475413,  0.00473045,
//2029 Jun 12
2462299.67097821,   4.0,  -2.0,   2.0, 75.7, 75.7,
  -0.01072016,  0.52476059,  1.0413e-05, -6.5357e-06,
   1.29541424, -0.01763651, -2.0572e-04,  2.8995e-07,
  23.15931854,  0.00259083, -5.4084e-06,
 240.03134315, 14.99919889, -5.8412e-07,
   0.55668621, -0.00010270, -1.0378e-05,
   0.01047663, -0.00010219, -1.0326e-05,
   0.00460491,  0.00458197,
//2029 Jul 11
2462329.15090742,  16.0,  -2.0,   1.0, 75.8, 75.8,
  -0.13726678,  0.52526319, -9.4671e-06, -7.0299e-06,
  -1.42716117, -0.12804167, -7.6896e-05,  1.8764e-06,
  22.00244674, -0.00542267, -5.2585e-06,
  58.59797077, 15.00000639,  1.6326e-06,
   0.54877949, -0.00012690, -1.0996e-05,
   0.00260931, -0.00012627, -1.0941e-05,
   0.00459944,  0.00457653,
//2029 Dec 5
2462476.12774779,  15.0,  -2.0,   3.0, 76.0, 76.0,
  -0.06375255,  0.57663525, -2.6601e-06, -9.5006e-06,
  -1.05967151, -0.01401654,  2.2946e-04,  1.0043e-07,
 -22.44545089, -0.00505369,  5.7488e-06,
  47.30568507, 14.99717203, -1.9120e-06,
   0.54066575,  0.00006986, -1.2834e-05,
  -0.00546439,  0.00006952, -1.2770e-05,
   0.00474464,  0.00472101,
//2030 Jun 1
2462653.77028123,   6.0,  -3.0,   4.0, 76.2, 76.2,
  -0.26931521,  0.50563712,  1.8150e-05, -5.6813e-06,
   0.55198267,  0.02101492, -1.5854e-04, -1.5696e-07,
  22.06129620,  0.00558135, -5.1798e-06,
 270.53576327, 14.99970117, -1.3623e-06,
   0.56617348, -0.00001297, -9.7051e-06,
   0.01991664, -0.00001290, -9.6567e-06,
   0.00461206,  0.00458909,
//2030 Nov 25
2462830.78583715,   7.0,  -3.0,   3.0, 76.4, 76.4,
   0.04423760,  0.57877973,  1.7660e-05, -9.7741e-06,
  -0.39266979, -0.05518899,  1.7434e-04,  8.3593e-07,
 -20.76099985, -0.00798900,  5.1545e-06,
 288.27085088, 14.99836104, -2.5865e-06,
   0.53823729, -0.00003787, -1.3035e-05,
  -0.00788074, -0.00003768, -1.2970e-05,
   0.00473614,  0.00471255,
//2031 May 21
2463007.80282114,   7.0,  -3.0,   4.0, 76.6, 76.6,
  -0.11470663,  0.51123929,  7.2276e-06, -6.0249e-06,
  -0.21123368,  0.05793294, -1.1822e-04, -6.0584e-07,
  20.15914850,  0.00833890, -4.6974e-06,
 285.84767664, 15.00062001, -1.8705e-06,
   0.56242875,  0.00008064, -1.0037e-05,
   0.01619054,  0.00008024, -9.9870e-06,
   0.00462090,  0.00459789,
//2031 Nov 14
2463185.38020952,  21.0,  -3.0,   3.0, 76.8, 76.8,
  -0.01978426,  0.55094384,  3.6594e-05, -8.2280e-06,
   0.31495244, -0.08906509,  1.0463e-04,  1.2441e-06,
 -18.33680895, -0.01053444,  4.3922e-06,
 138.89105461, 14.99976324, -2.8692e-06,
   0.54779801, -0.00010683, -1.1990e-05,
   0.00163239, -0.00010630, -1.1931e-05,
   0.00472611,  0.00470257,
//2032 May 9
2463362.06020599,  13.0,  -2.0,   3.0, 77.0, 77.0,
  -0.07427618,  0.53595460,  5.2564e-06, -7.4262e-06,
  -0.96542986,  0.09540578, -7.0242e-05, -1.2589e-06,
  17.59290535,  0.01069434, -4.0835e-06,
  15.88661343, 15.00173823, -2.0170e-06,
   0.54887633,  0.00012718, -1.1213e-05,
   0.00270559,  0.00012654, -1.1157e-05,
   0.00463105,  0.00460799,
//2032 Nov 3
2463539.73208642,   6.0,  -3.0,   2.0, 77.2, 77.2,
   0.44932298,  0.51201906,  1.7019e-05, -6.3820e-06,
   0.99080957, -0.11286831,  4.5171e-05,  1.3270e-06,
 -15.23991672, -0.01263290,  3.4958e-06,
 274.11729942, 15.00123045, -2.8067e-06,
   0.56262902, -0.00011268, -1.0598e-05,
   0.01638958, -0.00011212, -1.0545e-05,
   0.00471418,  0.00469071,
//2033 Mar 30
2463687.25179528,  18.0,  -3.0,   3.0, 77.4, 77.4,
  -0.31876292,  0.55542441,  2.2698e-05, -9.4239e-06,
   0.92470296,  0.17566095, -8.0113e-05, -2.8892e-06,
   4.09368335,  0.01571873, -8.9074e-07,
  88.92649695, 15.00445504, -2.4085e-07,
   0.53496597,  0.00002761, -1.2945e-05,
  -0.01113563,  0.00002747, -1.2881e-05,
   0.00468079,  0.00465748,
//2033 Sep 23
2463864.07952089,  14.0,  -3.0,   3.0, 77.6, 77.6,
  -0.30991709,  0.48154482,  8.6645e-06, -5.4083e-06,
  -1.11703668, -0.15454405,  4.7783e-05,  1.6705e-06,
  -0.33981988, -0.01584517, -2.2477e-07,
  31.94151786, 15.00480517, -4.5590e-07,
   0.56892197,  0.00003177, -9.7904e-06,
   0.02265132,  0.00003162, -9.7417e-06,
   0.00466078,  0.00463757,
//2034 Mar 20
2464041.92968240,  10.0,  -3.0,   3.0, 77.8, 77.8,
  -0.25951614,  0.54816291,  2.3374e-05, -8.9639e-06,
   0.22078310,  0.17557891, -7.9978e-06, -2.7901e-06,
  -0.05512699,  0.01604236, -1.5832e-07,
 328.13884275, 15.00440099,  5.0467e-07,
   0.53865448, -0.00006649, -1.2671e-05,
  -0.00746552, -0.00006616, -1.2608e-05,
   0.00469521,  0.00467183,
//2034 Sep 12
2464218.18017245,  16.0,  -3.0,   4.0, 78.0, 78.0,
  -0.28082184,  0.50283418, -1.0634e-05, -6.3481e-06,
  -0.32437145, -0.15778460, -8.4665e-07,  1.9175e-06,
   3.97190954, -0.01553381, -1.0112e-06,
  60.95006587, 15.00490377,  2.6521e-07,
   0.55782509,  0.00011884, -1.0555e-05,
   0.01160974,  0.00011825, -1.0503e-05,
   0.00464622,  0.00462308,
//2035 Mar 9
2464396.46241806,  23.0,  -3.0,   3.0, 78.2, 78.2,
   0.07955908,  0.52057381,  4.9322e-06, -7.2761e-06,
  -0.43279578,  0.16309453,  5.3216e-05, -2.1952e-06,
  -4.27334090,  0.01591991,  6.5032e-07,
 162.39717528, 15.00390457,  1.2236e-06,
   0.55264673, -0.00012195, -1.1422e-05,
   0.00645701, -0.00012134, -1.1365e-05,
   0.00470957,  0.00468612,
//2035 Sep 2
2464572.58108420,   2.0,  -3.0,   3.0, 78.4, 78.4,
   0.13437596,  0.53777354, -3.5962e-05, -8.1230e-06,
   0.34897483, -0.15846506, -5.9552e-05,  2.3229e-06,
   8.01771439, -0.01478295, -1.7127e-06,
 210.03162607, 15.00464133,  9.3101e-07,
   0.54194395,  0.00011035, -1.1875e-05,
  -0.00419227,  0.00010980, -1.1816e-05,
   0.00463289,  0.00460982,
//2036 Feb 27
2464750.69917090,   5.0,  -3.0,   2.0, 78.6, 78.6,
   0.44412694,  0.49340098, -2.0083e-05, -5.8109e-06,
  -1.11428467,  0.14454029,  9.9679e-05, -1.6222e-06,
  -8.49968972,  0.01528089,  1.5681e-06,
 251.81062814, 15.00299679,  1.9132e-06,
   0.56821596, -0.00009059, -1.0214e-05,
   0.02194867, -0.00009013, -1.0163e-05,
   0.00472313,  0.00469961,
//2036 Jul 23
2464897.93895579,  11.0,  -2.0,   1.0, 78.8, 78.8,
   0.09012426,  0.57882211, -1.7978e-05, -9.8369e-06,
  -1.44783212, -0.07336815, -5.4658e-05,  1.1590e-06,
  19.89421063, -0.00853668, -4.6451e-06,
 343.36456190, 15.00124228,  2.0580e-06,
   0.53045925, -0.00003060, -1.2796e-05,
  -0.01561971, -0.00003044, -1.2732e-05,
   0.00460193,  0.00457901,
//2036 Aug 21
2464927.22621146,  17.0,  -2.0,   3.0, 78.8, 78.8,
   0.03654715,  0.56328861, -2.8016e-05, -9.5562e-06,
   1.11035471, -0.14969717, -1.3544e-04,  2.4655e-06,
  11.74119116, -0.01364626, -2.3570e-06,
  74.26192717, 15.00402720,  1.4881e-06,
   0.53193231,  0.00004448, -1.2801e-05,
  -0.01415403,  0.00004426, -1.2737e-05,
   0.00462183,  0.00459881,
//2037 Jan 16
2465074.90896325,  10.0,  -3.0,   2.0, 79.0, 79.0,
  -0.01334805,  0.50710252, -2.1466e-05, -5.8365e-06,
   1.15150469,  0.04756258,  8.7500e-05, -4.6190e-07,
 -20.83011166,  0.00796920,  5.5148e-06,
 327.55361251, 14.99783249,  2.4182e-06,
   0.57210597,  0.00006330, -1.0117e-05,
   0.02581923,  0.00006299, -1.0066e-05,
   0.00475407,  0.00473039,
//2037 Jul 13
2465252.61151822,   3.0,  -3.0,   3.0, 79.2, 79.2,
   0.14160752,  0.56359959,  4.7172e-08, -8.6889e-06,
  -0.73372153, -0.03182168, -1.1310e-04,  4.0509e-07,
  21.78242670, -0.00604630, -5.1054e-06,
 223.55376491, 15.00022366,  1.6865e-06,
   0.53840693, -0.00011015, -1.1968e-05,
  -0.00771159, -0.00010960, -1.1908e-05,
   0.00459938,  0.00457648,
//2038 Jan 5
2465429.07442395,  14.0,  -4.0,   3.0, 79.4, 79.4,
   0.10901411,  0.53854099, -2.4832e-05, -7.2702e-06,
   0.41855287,  0.00799331,  1.3789e-04, -1.4408e-09,
 -22.55480574,  0.00481185,  6.1019e-06,
  28.64703329, 14.99681289,  1.5415e-06,
   0.55818728,  0.00011648, -1.1256e-05,
   0.01196985,  0.00011590, -1.1200e-05,
   0.00475543,  0.00473174,
//2038 Jul 2
2465607.06451746,  14.0,  -4.0,   3.0, 79.6, 79.6,
   0.23929454,  0.53154079,  9.9119e-06, -6.8661e-06,
   0.04415986,  0.00971130, -1.5440e-04, -2.3046e-07,
  22.99406416, -0.00324049, -5.4303e-06,
  28.96660208, 14.99942047,  1.0761e-06,
   0.55315945, -0.00012261, -1.0632e-05,
   0.00696745, -0.00012200, -1.0579e-05,
   0.00459941,  0.00457651,
//2038 Dec 26
2465783.54177005,   1.0,  -3.0,   3.0, 79.8, 79.8,
  -0.02056916,  0.56985620, -1.6906e-07, -9.1271e-06,
  -0.28739567, -0.03797106,  1.9151e-04,  7.2895e-07,
 -23.36258088,  0.00148085,  6.3056e-06,
 194.92645493, 14.99637417,  3.9915e-07,
   0.54353129,  0.00008670, -1.2619e-05,
  -0.00261315,  0.00008627, -1.2556e-05,
   0.00475380,  0.00473012,
//2039 Jun 21
2465961.21728016,  17.0,  -3.0,   3.0, 80.0, 80.0,
  -0.18950747,  0.50586925,  2.7595e-05, -5.7411e-06,
   0.81659444,  0.04954139, -1.8002e-04, -6.7082e-07,
  23.43237807, -0.00017776, -5.5442e-06,
  74.54014463, 14.99903882,  2.0922e-07,
   0.56454964, -0.00003876, -9.7600e-06,
   0.01830092, -0.00003856, -9.7114e-06,
   0.00460181,  0.00457889,
//2039 Dec 15
2466138.18316148,  16.0,  -2.0,   3.0, 80.2, 80.2,
  -0.36587263,  0.57692870,  4.7276e-05, -9.8088e-06,
  -0.90212752, -0.08494870,  2.2945e-04,  1.5936e-06,
 -23.27405202, -0.00186174,  6.1387e-06,
  61.23016036, 14.99652186, -7.8690e-07,
   0.53823075, -0.00000043, -1.3140e-05,
  -0.00788728, -0.00000043, -1.3074e-05,
   0.00474994,  0.00472628
);

//
// C2 limb corrections for the 2003 May 31 annular eclipse in seconds
//
// The first 3 elements of the array tell us that the remaining data starts at contact angle
// 197.37 degrees in 0.4 degree increments for 315 data points, which means that the last
// element is for angle 322.97 degrees
//
// These limb corrections were calculated by Fred Espenak, NASA/GSFC
//
var C2limb2003May = new Array(
197.37, 0.4, 315,
9.85, 9.35, 8.85, 8.33, 7.80, 7.26, 6.71, 6.14, 5.56, 5.22, 5.06,
4.89, 4.70, 4.51, 4.31, 4.10, 3.88, 3.82, 3.91, 4.00, 4.07, 4.14,
4.20, 4.26, 4.31, 4.35, 4.38, 4.41, 4.43, 4.44, 4.44, 4.44, 4.43,
4.42, 4.39, 4.36, 4.33, 4.28, 4.23, 4.17, 4.11, 4.04, 3.96, 3.87,
3.84, 3.85, 3.86, 3.86, 3.86, 3.85, 3.83, 3.81, 3.78, 3.74, 3.70,
3.65, 3.59, 3.53, 3.47, 3.39, 3.31, 3.22, 3.13, 3.03, 2.93, 2.81,
2.70, 2.57, 2.44, 2.31, 2.16, 2.01, 1.86, 1.70, 1.59, 1.64, 1.69,
1.72, 1.76, 1.78, 1.81, 1.87, 1.92, 1.97, 2.01, 2.05, 2.08, 2.11,
2.13, 2.15, 2.16, 2.23, 2.37, 2.51, 2.64, 2.77, 2.89, 3.01, 3.12,
3.23, 3.33, 3.43, 3.52, 3.61, 3.69, 3.77, 3.84, 3.91, 3.97, 4.03,
4.08, 4.13, 4.17, 4.21, 4.24, 4.27, 4.29, 4.31, 4.32, 4.33, 4.33,
4.33, 4.32, 4.31, 4.29, 4.27, 4.24, 4.20, 4.17, 4.12, 4.08, 4.02,
3.96, 3.90, 3.83, 3.76, 3.68, 3.60, 3.51, 3.42, 3.32, 3.22, 3.11,
3.00, 2.88, 2.76, 2.63, 2.53, 2.50, 2.46, 2.41, 2.36, 2.31, 2.25,
2.19, 2.12, 2.04, 1.96, 1.88, 1.79, 1.70, 1.60, 1.49, 1.39, 1.27,
1.15, 1.03, 0.90, 0.77, 0.63, 0.49, 0.34, 0.19, 0.17, 0.21, 0.24,
0.26, 0.29, 0.30, 0.31, 0.32, 0.32, 0.31, 0.30, 0.29, 0.26, 0.24,
0.21, 0.17, 0.13, 0.09, 0.05, 0.18, 0.31, 0.43, 0.55, 0.66, 0.77,
0.87, 0.97, 1.05, 1.14, 1.22, 1.29, 1.36, 1.42, 1.48, 1.53, 1.57,
1.61, 1.65, 1.68, 1.70, 1.72, 1.73, 1.73, 1.73, 1.73, 1.72, 1.70,
1.69, 1.75, 1.81, 1.87, 1.92, 1.96, 2.00, 2.03, 2.06, 2.08, 2.10,
2.11, 2.12, 2.12, 2.12, 2.13, 2.16, 2.18, 2.19, 2.20, 2.21, 2.25,
2.35, 2.44, 2.52, 2.59, 2.66, 2.71, 2.77, 2.81, 2.85, 2.89, 2.91,
2.93, 2.94, 2.95, 2.94, 3.07, 3.22, 3.37, 3.51, 3.64, 3.77, 3.88,
3.99, 4.09, 4.18, 4.27, 4.34, 4.41, 4.47, 4.52, 4.57, 4.60, 4.63,
4.65, 4.66, 4.66, 4.66, 4.64, 4.62, 4.59, 4.55, 4.50, 4.45, 4.39,
4.31, 4.23, 4.15, 4.05, 3.94, 3.83, 3.71, 3.58, 3.44, 3.29, 3.14,
2.97, 2.80, 2.62, 2.88, 3.47, 4.05, 4.62, 5.16, 5.70, 6.21, 6.71,
7.19, 7.66, 8.10, 8.54, 8.95, 9.35, 9.73
);

//
// C3 limb corrections for the 2003 May 31 annular eclipse in seconds
//
// The first 3 elements of the array tell us that the remaining data starts at contact angle
// 353.37 degrees in 0.4 degree increments for 340 data points, which means that the last
// element is for angle 128.97 degrees
//
// These limb corrections were calculated by Fred Espenak, NASA/GSFC
//
var C3limb2003May = new Array(
353.37, 0.4, 340,
-8.67, -6.49, -6.14, -6.36, -6.62, -6.87, -7.09, -7.29, -7.47, -7.64, -7.78,
-7.90, -8.01, -8.09, -8.15, -8.20, -8.22, -8.23, -8.22, -8.18, -8.13, -8.06,
-7.97, -7.86, -7.74, -7.59, -7.43, -7.25, -7.05, -6.83, -6.60, -6.34, -6.07,
-5.78, -5.48, -5.15, -4.81, -4.79, -4.82, -4.84, -4.85, -4.84, -4.83, -4.80,
-4.76, -4.70, -4.64, -4.56, -4.48, -4.38, -4.26, -4.14, -4.01, -3.86, -3.81,
-3.79, -3.78, -3.92, -4.05, -4.17, -4.29, -4.40, -4.50, -4.59, -4.67, -4.74,
-4.81, -4.87, -4.92, -4.96, -5.00, -5.02, -5.04, -5.05, -5.05, -5.04, -5.03,
-5.00, -4.97, -4.93, -4.89, -4.83, -4.77, -4.70, -4.62, -4.53, -4.44, -4.33,
-4.22, -4.20, -4.26, -4.32, -4.37, -4.42, -4.45, -4.49, -4.51, -4.53, -4.54,
-4.55, -4.54, -4.54, -4.52, -4.50, -4.47, -4.44, -4.39, -4.35, -4.29, -4.23,
-4.16, -4.09, -4.01, -3.92, -3.82, -3.72, -3.62, -3.50, -3.38, -3.37, -3.40,
-3.42, -3.44, -3.46, -3.47, -3.47, -3.46, -3.45, -3.44, -3.42, -3.39, -3.36,
-3.32, -3.27, -3.22, -3.18, -3.12, -3.06, -3.00, -2.93, -2.91, -2.90, -2.87,
-2.85, -2.81, -2.77, -2.73, -2.68, -2.62, -2.57, -2.52, -2.63, -2.75, -2.87,
-2.99, -3.10, -3.21, -3.31, -3.40, -3.49, -3.58, -3.66, -3.73, -3.81, -3.87,
-3.93, -3.99, -4.04, -4.08, -4.12, -4.16, -4.19, -4.21, -4.23, -4.25, -4.26,
-4.26, -4.26, -4.25, -4.24, -4.23, -4.23, -4.23, -4.22, -4.21, -4.20, -4.18,
-4.15, -4.12, -4.09, -4.05, -4.04, -4.09, -4.14, -4.19, -4.23, -4.26, -4.31,
-4.37, -4.44, -4.49, -4.54, -4.59, -4.63, -4.67, -4.76, -4.88, -4.99, -5.11,
-5.21, -5.31, -5.41, -5.50, -5.58, -5.66, -5.74, -5.81, -5.88, -5.94, -5.99,
-6.04, -6.09, -6.13, -6.16, -6.20, -6.22, -6.24, -6.26, -6.27, -6.27, -6.28,
-6.28, -6.27, -6.26, -6.24, -6.22, -6.19, -6.16, -6.12, -6.08, -6.03, -5.98,
-5.92, -5.86, -5.79, -5.72, -5.64, -5.56, -5.47, -5.47, -5.45, -5.44, -5.41,
-5.39, -5.35, -5.31, -5.27, -5.22, -5.17, -5.11, -5.05, -4.98, -4.90, -4.82,
-4.74, -4.67, -4.60, -4.53, -4.46, -4.43, -4.61, -4.78, -4.95, -5.11, -5.27,
-5.42, -5.57, -5.70, -5.84, -5.96, -6.08, -6.20, -6.30, -6.40, -6.50, -6.59,
-6.67, -6.75, -6.82, -6.88, -6.96, -7.13, -7.29, -7.44, -7.58, -7.72, -7.86,
-7.98, -8.10, -8.22, -8.32, -8.42, -8.52, -8.60, -8.68, -8.75, -8.82, -8.88,
-8.93, -8.98, -9.02, -9.06, -9.08, -9.11, -9.12, -9.13, -9.13, -9.12, -9.11,
-9.09, -9.06, -9.03, -8.98, -8.94, -8.90, -8.87, -8.83, -8.79, -8.74, -8.68,
-8.62, -8.54, -8.47, -8.38, -8.29, -8.18, -8.09, -8.59, -9.08, -9.56
);

//
// Calculate a limb correction
function limbcorrection(p, correctiondata)
{
  var i = (p * R2D) - correctiondata[0];
  while (i >= 360.0)
    i -= 360.0;
  while (i < 0.0)
    i += 360.0;
  if (correctiondata[1] != 0.0)
    i /= correctiondata[1];
  else
    return 999.0;
  if (i >= (correctiondata[2] - 1))
    return 999.0;
  var n = Math.floor(i);

  return (((correctiondata[n + 4] - correctiondata[n + 3]) * (i - n)) + correctiondata[n + 3]);
}

//
// Observer constants -
// (0) North Latitude (radians)
// (1) West Longitude (radians)
// (2) Altitude (meters)
// (3) West time zone (hours)
// (4) rho sin O'
// (5) rho cos O'
// (6) index into the elements array for the eclipse in question
//
// Note that correcting for refraction will involve creating a "virtual" altitude
// for each contact, and hence a different value of rho and O' for each contact!
//
var obsvconst = new Array();

//
// Eclipse circumstances
//  (0) Event type (C1=-2, C2=-1, Mid=0, C3=1, C4=2)
//  (1) t
// -- time-only dependent circumstances (and their per-hour derivatives) follow --
//  (2) x
//  (3) y
//  (4) d
//  (5) sin d
//  (6) cos d
//  (7) mu
//  (8) l1
//  (9) l2
// (10) dx
// (11) dy
// (12) dd
// (13) dmu
// (14) dl1
// (15) dl2
// -- time and location dependent circumstances follow --
// (16) h
// (17) sin h
// (18) cos h
// (19) xi
// (20) eta
// (21) zeta
// (22) dxi
// (23) deta
// (24) u
// (25) v
// (26) a
// (27) b
// (28) l1'
// (29) l2'
// (30) n^2
// -- observational circumstances follow --
// (31) p position angle measured from the north point of the Sun
// (32) alt
// (33) q parallactic angle
// (34) v position angle measured from the zenith point of the solar limb towards the west (Z/V)
// (35) azi
// (36) m (maximum eclipse and c1/c4 when available) or limb correction at c2/c3 (where available!)
// (37) magnitude (maximum eclipse and c1/c4 when available)
// (38) Moon/Sun ratio (maximum eclipse only)
// (39) calculated local event type for a transparent earth (0 = none, 1 = partial, 2 = annular, 3 = total)
// (40) event visibility (0 = above horizon, 1 = below horizon, 2 = sunrise, 3 = sunset, 4 = below horizon, disregard)
// (41) Moon altitude (diagram)
// (42) Moon azimuth (diagram)
// (43) Sun radius in degrees
// (44) Moon radius in degrees
// (45) Sun altitude (diagram)
// (46) Sun azimuth (diagram)
// (47) Moon distance in earth radii
// (48) Moon libration in longitude in degrees
// (49) Moon libration in latitude in degrees
// (50) Moon north pole axis in degrees
// (51) Sun north pole axis in degrees
//
var lambdak1k2 = 1.00076024401; // = k1/k2 with k1 = 0.2724880 and k2 = 0.2722810 or 1.00076026356 with 0.272481 and 0.272274
//var lambdak1k2 = 1.00083222847; // = k1/k2 with k1 = 0.2725076 and k2 = 0.2722810 (IAU 1982)
var f1, f2;

var c1 = new Array();
var c2 = new Array();
var mid = new Array();
var c3 = new Array();
var c4 = new Array();

var c1_alt = new Array(2);
var c1_azi = new Array(2);
var c1_rad = new Array(2);
var c2_alt = new Array(2);
var c2_azi = new Array(2);
var c2_rad = new Array(2);
var mid_alt = new Array(2);
var mid_azi = new Array(2);
var mid_rad = new Array(2);
var c3_alt = new Array(2);
var c3_azi = new Array(2);
var c3_rad = new Array(2);
var c4_alt = new Array(2);
var c4_azi = new Array(2);
var c4_rad = new Array(2);
var V = new Array(2);
var PV = new Array(5);

//
// Populate the circumstances array with the time-only dependent circumstances (x, y, d, m, ...)
function timedependent( circumstances )
{
  var t = circumstances[1];
  var index = obsvconst[6];
  // x
  var ans = elements[9 + index] * t + elements[8 + index];
  ans = ans * t + elements[7 + index];
  ans = ans * t + elements[6 + index];
  circumstances[2] = ans;
  // dx
  ans = 3.0 * elements[9 + index] * t + 2.0 * elements[8 + index];
  ans = ans * t + elements[7 + index];
  circumstances[10] = ans;
  // y
  ans = elements[13 + index] * t + elements[12 + index];
  ans = ans * t + elements[11 + index];
  ans = ans * t + elements[10 + index];
  circumstances[3] = ans;
  // dy
  ans = 3.0 * elements[13 + index] * t + 2.0 * elements[12 + index];
  ans = ans * t + elements[11 + index];
  circumstances[11] = ans;
  // d
  ans = elements[16 + index] * t + elements[15 + index];
  ans = ans * t + elements[14 + index];
  ans *= D2R;
  circumstances[4] = ans;
  // sin d and cos d
  circumstances[5] = Math.sin(ans);
  circumstances[6] = Math.cos(ans);
  // dd
  ans = 2.0 * elements[16 + index] * t + elements[15 + index];
  ans *= D2R;
  circumstances[12] = ans;
  // m
  ans = elements[19 + index] * t + elements[18 + index];
  ans = ans * t + elements[17 + index];
  if (ans >= 360.0)
    ans -= 360.0;
  ans *= D2R;
  circumstances[7] = ans;
  // dm
  ans = 2.0 * elements[19 + index] * t + elements[18 + index];
  ans *= D2R;
  circumstances[13] = ans;
  // l1 and dl1
  var type = circumstances[0];
  ans = elements[22 + index] * t + elements[21 + index];
  ans = ans * t + elements[20 + index];
  circumstances[8] = ans;
  if ((type == -2) || (type == 0) || (type == 2))
    circumstances[14] = 2.0 * elements[22 + index] * t + elements[21 + index];
  // l2 and dl2
  ans = elements[25 + index] * t + elements[24 + index];
  ans = ans * t + elements[23 + index];
  circumstances[9] = ans;
  if ((type == -1) || (type == 0) || (type == 1))
    circumstances[15] = 2.0 * elements[25 + index] * t + elements[24 + index];

  return circumstances;
}

//
// Populate the circumstances array with the time and location dependent circumstances
function timelocdependent( circumstances )
{
  timedependent(circumstances);
  var index = obsvconst[6];
  // h, sin h, cos h
  circumstances[16] = circumstances[7] - obsvconst[1] - (elements[5 + index] / 13713.440924999626077);
  circumstances[17] = Math.sin(circumstances[16]);
  circumstances[18] = Math.cos(circumstances[16]);
  // xi
  circumstances[19] = obsvconst[5] * circumstances[17];
  // eta
  circumstances[20] = (obsvconst[4] * circumstances[6]) - (obsvconst[5] * circumstances[18] * circumstances[5]);
  // zeta
  circumstances[21] = (obsvconst[4] * circumstances[5]) + (obsvconst[5] * circumstances[18] * circumstances[6]);
  // dxi
  circumstances[22] = circumstances[13] * obsvconst[5] * circumstances[18];
  // deta
  circumstances[23] = (circumstances[13] * circumstances[19] * circumstances[5]) - (circumstances[21] * circumstances[12]);
  // u
  circumstances[24] = circumstances[2] - circumstances[19];
  // v
  circumstances[25] = circumstances[3] - circumstances[20];
  // a
  circumstances[26] = circumstances[10] - circumstances[22];
  // b
  circumstances[27] = circumstances[11] - circumstances[23];
  // l1'
  var type = circumstances[0];
  if ((type == -2) || (type == 0) || (type == 2))
    circumstances[28] = circumstances[8] - (circumstances[21] * elements[26 + index]);
  // l2'
  if ((type == -1) || (type == 0) || (type == 1))
    circumstances[29] = circumstances[9] - (circumstances[21] * elements[27 + index]);
  // n^2
  circumstances[30] = (circumstances[26] * circumstances[26]) + (circumstances[27] * circumstances[27]);

  return circumstances;
}

//
// Iterate on C1 or C4
function c1c4iterate( circumstances )
{
  var sign, n;

  timelocdependent(circumstances);
  if (circumstances[0] < 0)
    sign = -1.0;
  else
    sign = 1.0;
  var tmp = 1.0;
  var iter = 0;
  while (((tmp > 0.000001) || (tmp < -0.000001)) && (iter < 50))
  {
    n = Math.sqrt(circumstances[30]);
    tmp = (circumstances[26] * circumstances[25]) - (circumstances[24] * circumstances[27]);
    tmp = tmp / (n * circumstances[28]);
    if ( Math.abs(tmp) <= 1.0 )
      tmp = sign * Math.sqrt(1.0 - (tmp * tmp)) * circumstances[28] / n;
    else
      tmp = 0.0;
    tmp = ((circumstances[24] * circumstances[26]) + (circumstances[25] * circumstances[27])) / circumstances[30] - tmp;
    circumstances[1] -= tmp;
    timelocdependent(circumstances);
    iter++;
  }

  return circumstances;
}

//
// Get C1 and C4 data
//   Entry conditions -
//   1. The mid array must be populated
//   2. The magnitude at maximum eclipse must be > 0.0
function getc1c4( )
{
  var n = Math.sqrt(mid[30]);
  var tmp = (mid[26] * mid[25]) - (mid[24] * mid[27]);
  tmp = tmp / (n * mid[28]);
  tmp = Math.sqrt(1.0 - (tmp * tmp)) * mid[28] / n;
  c1[0] = -2;
  c4[0] = 2;
  c1[1] = mid[1] - tmp;
  c4[1] = mid[1] + tmp;
  c1c4iterate(c1);
  c1c4iterate(c4);
}

//
// Iterate on C2 or C3
function c2c3iterate( circumstances )
{
  var sign, n;

  timelocdependent(circumstances);
  if (circumstances[0] < 0)
    sign = -1.0;
  else
    sign = 1.0;
  if (mid[29] < 0.0)
    sign = -sign;
  var tmp = 1.0;
  var iter = 0;
  while (((tmp > 0.000001) || (tmp < -0.000001)) && (iter < 50))
  {
    n = Math.sqrt(circumstances[30]);
    tmp = (circumstances[26] * circumstances[25]) - (circumstances[24] * circumstances[27]);
    tmp = tmp / (n * circumstances[29]);
    if ( Math.abs(tmp) <= 1.0 )
      tmp = sign * Math.sqrt(1.0 - (tmp * tmp)) * circumstances[29] / n;
    else
      tmp = 0.0;
    tmp = ((circumstances[24] * circumstances[26]) + (circumstances[25] * circumstances[27])) / circumstances[30] - tmp;
    circumstances[1] -= tmp;
    timelocdependent(circumstances);
    iter++;
  }

  return circumstances;
}

//
// Get C2 and C3 data
//   Entry conditions -
//   1. The mid array must be populated
//   2. There must be either a total or annular eclipse at the location
function getc2c3( )
{
  var n = Math.sqrt(mid[30]);
  var tmp = (mid[26] * mid[25]) - (mid[24] * mid[27]);
  tmp = tmp / (n * mid[29]);
  tmp = Math.sqrt(1.0 - (tmp * tmp)) * mid[29] / n;
  c2[0] = -1;
  c3[0] = 1;
  if (mid[29] < 0.0)
  {
    c2[1] = mid[1] + tmp;
    c3[1] = mid[1] - tmp;
  }
  else
  {
    c2[1] = mid[1] - tmp;
    c3[1] = mid[1] + tmp;
  }
  c2c3iterate(c2);
  c2c3iterate(c3);
}

//
// Get the observational circumstances
function observational( circumstances )
{
  var contacttype, coslat, sinla;

  // We are looking at an "external" contact UNLESS this is a total solar eclipse AND we are looking at
  // c2 or c3, in which case it is an INTERNAL contact! Note that if we are looking at maximum eclipse,
  // then we may not have determined the type of eclipse (mid[39]) just yet!
  if (circumstances[0] == 0)
    contacttype = 1.0;
  else
  {
    if ((mid[39] == 3) && ((circumstances[0] == -1) || (circumstances[0] == 1)))
      contacttype = -1.0;
    else
      contacttype = 1.0;
  }
  // p
  circumstances[31] = Math.atan2(contacttype * circumstances[24], contacttype * circumstances[25]);
  // alt
  sinlat = Math.sin(obsvconst[0]);
  coslat = Math.cos(obsvconst[0]);
  circumstances[32] = Math.asin((circumstances[5] * sinlat) + (circumstances[6] * coslat * circumstances[18]));
  // q
  circumstances[33] = Math.asin(coslat * circumstances[17] / Math.cos(circumstances[32]));
  if (circumstances[20] < 0.0)
    circumstances[33] = Math.PI - circumstances[33];
  // v
  circumstances[34] = circumstances[31] - circumstances[33];
  // azi
  circumstances[35] = Math.atan2(-circumstances[17] * circumstances[6], (circumstances[5] * coslat) - (circumstances[18] * sinlat * circumstances[6]));

  // Visibility (take refraction into account)
  if (circumstances[32] > gRefractionHeight)
    circumstances[40] = 0;
  else
    circumstances[40] = 1;

  var index = obsvconst[6];
  var xi = circumstances[19];
  var eta = circumstances[20];
  var zeta = circumstances[21];
  // Sun distance in unit of the earth equatorial radius
  var zs = (circumstances[8] * Math.cos(f1)) - (circumstances[9] * Math.cos(f2));
  zs /= Math.sin(f1) - Math.sin(f2);
  // Moon distance in unit of the earth equatorial radius
  var zm = (circumstances[8] * Math.cos(f1)) + (lambdak1k2 * circumstances[9] * Math.cos(f2));
  zm /= Math.sin(f1) + (lambdak1k2 * Math.sin(f2));
  var u = circumstances[2] - xi;
  var v = circumstances[3] - eta;
  zs -= zeta;
  zm -= zeta;
  var tmp = Math.sqrt((u * u) + (v * v) + (zs * zs));
  var sdec = (v * circumstances[6]) + (zs * circumstances[5]);
  sdec = Math.asin(sdec / tmp);
  tmp = Math.sqrt((u * u) + (v * v) + (zm * zm));
  var mdec = (v * circumstances[6]) + (zm * circumstances[5]);
  mdec = Math.asin(mdec / tmp);
  var deltamus = Math.atan(u / ((v * circumstances[5]) - (zs * circumstances[6])));
  var deltamum = Math.atan(u / ((v * circumstances[5]) - (zm * circumstances[6])));
  var sha = circumstances[7] + deltamus;
  var mha = circumstances[7] + deltamum;

  // Local hour angle
  sha -= obsvconst[1] + (elements[5 + index] / 13713.440924999626077);
  mha -= obsvconst[1] + (elements[5 + index] / 13713.440924999626077);

  var sinsdec = Math.sin(sdec);
  var cossdec = Math.cos(sdec);
  var sinsha = Math.sin(sha);
  var cossha = Math.cos(sha);
  // Sun altitude
  circumstances[45] = Math.asin((sinsdec * sinlat) + (cossdec * cossha * coslat));
  // Sun azimuth
  circumstances[46] = Math.atan2(-cossdec * sinsha, (sinsdec * coslat) - (cossdec * cossha * sinlat));
  var sinmdec = Math.sin(mdec);
  var cosmdec = Math.cos(mdec);
  var sinmha = Math.sin(mha);
  var cosmha = Math.cos(mha);
  // Moon altitude
  circumstances[41] = Math.asin((sinmdec * sinlat) + (cosmdec * cosmha * coslat));
  // Moon azimuth
  circumstances[42] = Math.atan2(-cosmdec * sinmha, (sinmdec * coslat) - (cosmdec * cosmha * sinlat));

  // Sun apparent radius
  tmp = (circumstances[8] * Math.cos(f1) * Math.sin(f2)) - (circumstances[9] * Math.sin(f1) * Math.cos(f2));
  var R = tmp / (Math.sin(f1) - Math.sin(f2));
  var rs = Math.asin(R / Math.sqrt((u * u) + (v * v) + (zs * zs))); // Topocentric
  circumstances[43] = rs * R2D;
  // Moon apparent radius
  var k = tmp / ((Math.sin(f1) / lambdak1k2) + Math.sin(f2));
  var rm = Math.asin(k / Math.sqrt((u * u) + (v * v) + (zm * zm))); // Topocentric
  circumstances[44] = rm * R2D;
  // Moon distance in earth radii
  circumstances[47] = zm;

  // Moon's libration
  if (circumstances[0] == 0)
  {
    var jd = getjd(circumstances, index);
    var jd2000 = jd - 2451545.0;
    var st = jd2000 / 36525.0;
    var st2 = st * st;
    var st3 = st2 * st;
    var st4 = st2 * st2;

    // Meeus AA page 144
    var D = rev(297.85036 + (445267.111480 * st) - (0.0019142 * st2) + (st3 / 189474.0)) * D2R;
    var M = rev(357.52772 + (35999.050340 * st) - (0.0001603 * st2) - (st3 / 300000.0)) * D2R;
    var M1 = rev(134.96298 + (477198.867398 * st) + (0.0086972 * st2) + (st3 / 56250.0)) * D2R;
    var DF = rev(93.27191 + (483202.017538 * st) - (0.0036825 * st2) + (st3 / 327270.0)) * D2R;
    var OM = rev(125.04452 - (1934.136261 * st) + (0.0020708 * st2) + (st3 / 450000.0)) * D2R;

    // Nutation in longitude
    var DeltaPsi = -(171996 + 174.2 * st) * Math.sin(OM);
    DeltaPsi -= (13187 + 1.6 * st) * Math.sin(-2 * D + 2 * DF + 2 * OM);
    DeltaPsi -= (2274 + 0.2 * st) * Math.sin(2 * DF + 2 * OM);
    DeltaPsi += (2062 + 0.2 * st) * Math.sin(2 * OM);
    DeltaPsi += (1426 - 3.4 * st) * Math.sin(M);
    DeltaPsi += (712 + 0.1 * st) * Math.sin(M1);
    DeltaPsi += (-517 + 1.2 * st) * Math.sin(-2 * D + M + 2 * DF + 2 * OM);
    DeltaPsi -= (386 + 0.4 * st) * Math.sin(2 * DF + OM);
    DeltaPsi -= 301 * Math.sin(M1 + 2 * DF + 2 * OM);
    DeltaPsi += (217 - 0.5 * st) * Math.sin(-2 * D - M + 2 * DF + 2 * OM);
    DeltaPsi -= 158 * Math.sin(-2 * D + M1);
    DeltaPsi += (129 + 0.1 * st) * Math.sin(-2 * D + 2 * DF + OM);
    DeltaPsi += 123 * Math.sin(-M1 + 2 * DF + 2 * OM);
    DeltaPsi += 63 * Math.sin(2 * D);
    DeltaPsi += (63 + 0.1 * st) * Math.sin(M1 + OM);
    DeltaPsi -= 59 * Math.sin(2 * D - M1 + 2 * DF + 2 * OM);
    DeltaPsi -= (58 + 0.1 * st) * Math.sin(-M1 + OM);
    DeltaPsi -= 51 * Math.sin(M1 + 2 * DF + OM);
    DeltaPsi += 48 * Math.sin(-2 * D + 2 * M1);
    DeltaPsi += 46 * Math.sin(-2 * M1 + 2 * DF + OM);
    DeltaPsi -= 38 * Math.sin(2 * D + 2 * DF + 2 * OM);
    DeltaPsi -= 31 * Math.sin(2 * M1 + 2 * DF + 2 * OM);
    DeltaPsi += 29 * Math.sin(2 * M1);
    DeltaPsi += 29 * Math.sin(-2 * D + M1 + 2 * DF + 2 * OM);
    DeltaPsi += 26 * Math.sin(2 * DF);
    DeltaPsi -= 22 * Math.sin(2 * DF - 2 * D);
    DeltaPsi += 21 * Math.sin(2 * DF - M1);
    DeltaPsi += (17 - 0.1 * st) * Math.sin(2 * M);
    DeltaPsi += 16 * Math.sin(2 * D - M1 + OM);
    DeltaPsi -= (16 - 0.1 * st) * Math.sin(2 * (OM + DF + M - D));
    DeltaPsi -= 15 * Math.sin(M + OM);
    DeltaPsi -= 13 * Math.sin(OM + M1 - 2 * D);
    DeltaPsi -= 12 * Math.sin(OM - M);
    DeltaPsi += 11 * Math.sin(2 * (M1 - DF));
    DeltaPsi -= 10 * Math.sin(2 * D - M1 + 2 * DF);
    DeltaPsi -= 8 * Math.sin(2 * D + M1 + 2 * DF + 2 * OM);
    DeltaPsi += 7 * Math.sin(M + 2 * DF + 2 * OM);
    DeltaPsi -= 7 * Math.sin(M + M1 - 2 * D);
    DeltaPsi -= 7 * Math.sin(2 * DF + 2 * OM - M);
    DeltaPsi -= 7 * Math.sin(2 * D + 2 * DF + OM);
    DeltaPsi += 6 * Math.sin(2 * D + M1);
    DeltaPsi += 6 * Math.sin(2 * (OM + DF + M1 - D));
    DeltaPsi += 6 * Math.sin(OM + 2 * DF + M1 - 2 * D);
    DeltaPsi -= 6 * Math.sin(2 * D - 2 * M1 + OM);
    DeltaPsi -= 6 * Math.sin(2 * D + OM);
    DeltaPsi += 5 * Math.sin(M1 - M);
    DeltaPsi -= 5 * Math.sin(OM + 2 * DF - M - 2 * D);
    DeltaPsi -= 5 * Math.sin(OM - 2 * D);
    DeltaPsi -= 5 * Math.sin(OM + 2 * DF + 2 * M1);
    DeltaPsi += 4 * Math.sin(OM - 2 * M1 - 2 * D);
    DeltaPsi += 4 * Math.sin(OM + 2 * DF + M - 2 * D);
    DeltaPsi += 4 * Math.sin(M1 - 2 * DF);
    DeltaPsi -= 4 * Math.sin(M1 - D);
    DeltaPsi -= 4 * Math.sin(M - 2 * D);
    DeltaPsi -= 4 * Math.sin(D);
    DeltaPsi += 3 * Math.sin(2 * DF + M1);
    DeltaPsi -= 3 * Math.sin(2 * (OM + DF - M1));
    DeltaPsi -= 3 * Math.sin(M1 - M - D);
    DeltaPsi -= 3 * Math.sin(M1 + M);
    DeltaPsi -= 3 * Math.sin(2 * OM + 2 * DF + M1 - M);
    DeltaPsi -= 3 * Math.sin(2 * OM + 2 * DF - M1 - M + 2 * D);
    DeltaPsi -= 3 * Math.sin(2 * OM + 2 * DF + 3 * M1);
    DeltaPsi -= 3 * Math.sin(2 * OM + 2 * DF - M + 2 * D);
    DeltaPsi *= 0.0001 / 3600.0;

    // Nutation in obliquity
    var DeltaEpsilon = (92025 + 8.9 * st) * Math.cos(OM);
    DeltaEpsilon += (5736 - 3.1 * st) * Math.cos(-2 * D + 2 * DF + 2 * OM);
    DeltaEpsilon += (977 - 0.5 * st) * Math.cos(2 * DF + 2 * OM);
    DeltaEpsilon += (-895 + 0.5 * st) * Math.cos(2 * OM);
    DeltaEpsilon += (54 - 0.1 * st) * Math.cos(M);
    DeltaEpsilon -= 7 * Math.cos(M1);
    DeltaEpsilon += (224 - 0.6 * st) * Math.cos(-2 * D + M + 2 * DF + 2 * OM);
    DeltaEpsilon += 200 * Math.cos(2 * DF + OM);
    DeltaEpsilon += (129 - 0.1 * st) * Math.cos(M1 + 2 * DF + 2 * OM);
    DeltaEpsilon += (-95 + 0.3 * st) * Math.cos(-2 * D - M + 2 * DF + 2 * OM);
    DeltaEpsilon -= 70 * Math.cos(-2 * D + 2 * DF + OM);
    DeltaEpsilon -= 53 * Math.cos(-M1 + 2 * DF + 2 * OM);
    DeltaEpsilon -= 33 * Math.cos(M1 + OM);
    DeltaEpsilon += 26 * Math.cos(2 * D - M1 + 2 * DF + 2 * OM);
    DeltaEpsilon += 32 * Math.cos(-M1 + OM);
    DeltaEpsilon += 27 * Math.cos(M1 + 2 * DF + OM);
    DeltaEpsilon -= 24 * Math.cos(-2 * M1 + 2 * DF + OM);
    DeltaEpsilon += 16 * Math.cos(2 * (D + DF + OM));
    DeltaEpsilon += 13 * Math.cos(2 * (M1 + DF + OM));
    DeltaEpsilon -= 12 * Math.cos(2 * OM + 2 * DF + M1 - 2 * D);
    DeltaEpsilon -= 10 * Math.cos(OM + 2 * DF - M1);
    DeltaEpsilon -= 8 * Math.cos(2 * D - M1 + OM);
    DeltaEpsilon += 7 * Math.cos(2 * (OM + DF + M - D));
    DeltaEpsilon += 9 * Math.cos(M + OM);
    DeltaEpsilon += 7 * Math.cos(OM + M1 - 2 * D);
    DeltaEpsilon += 6 * Math.cos(OM - M);
    DeltaEpsilon += 5 * Math.cos(OM + 2 * DF - M1 + 2 * D);
    DeltaEpsilon += 3 * Math.cos(2 * OM + 2 * DF + M1 + 2 * D);
    DeltaEpsilon -= 3 * Math.cos(2 * OM + 2 * DF + M);
    DeltaEpsilon += 3 * Math.cos(2 * OM + 2 * DF - M);
    DeltaEpsilon += 3 * Math.cos(OM + 2 * DF + 2 * D);
    DeltaEpsilon -= 3 * Math.cos(2 * (OM + DF + M1 - D));
    DeltaEpsilon -= 3 * Math.cos(OM + 2 * DF + M1 - 2 * D);
    DeltaEpsilon += 3 * Math.cos(OM - 2 * M1 + 2 * D);
    DeltaEpsilon += 3 * Math.cos(OM + 2 * D);
    DeltaEpsilon += 3 * Math.cos(OM + 2 * DF - M - 2 * D);
    DeltaEpsilon += 3 * Math.cos(OM - 2 * D);
    DeltaEpsilon += 3 * Math.cos(OM + 2 * DF + 2 * M1);
    DeltaEpsilon *= 0.0001 / 3600.0;

    var epsilon0 = (((21.448 / 60.0) + 26.0) / 60.0) + 23.0;
    var u = st / 100.0;
    var laskar = (u * (-4680.93 + (u * (-1.55 + (u * (1999.25 + (u * (-51.38 + (u * (-249.67 + (u * (-39.05 + (u * (7.12 + (u * (27.87 + (u * (5.79 + (u * 2.45))))))))))))))))))) / 3600.0;
    epsilon0 += laskar;
    var epsilon = epsilon0 + DeltaEpsilon;

    // Apparent sidereal time (Meeus AA page 88)
    var siderealTime = 280.46061837 + (360.98564736629 * jd2000) + (0.000387933 * st2) - (st3 / 38710000.0);
    siderealTime += DeltaPsi * Math.cos(epsilon * D2R);
    siderealTime = rev(siderealTime);
    localSiderealTime = siderealTime - (obsvconst[1] * R2D);
    localSiderealTime = rev(localSiderealTime);
//    var salpha = localSiderealTime - (sha * R2D);
//    salpha = rev(salpha);
    var malpha = localSiderealTime - (mha * R2D);
    malpha = rev(malpha);

    gMoonData.topoRA = malpha * D2R;
    gMoonData.topoDec = mdec;
    equatorial2ecliptical(gMoonData, epsilon * D2R);

    // Longitude of the mean ascending node (AA 47.7)
    var omega = rev(125.0445479 - (1934.1362891 * st) + (0.0020754 * st2) + (st3 / 467441) - (st4 / 60616000)) * D2R;

    // Sun's mean anomaly (AA 47.3)
    M = rev(357.5291092 + (35999.0502909 * st) - (0.0001536 * st2) + (st3 / 24490000)) * D2R;

    // Moon's mean anomaly (AA 47.4)
    M1 = rev(134.9633964 + (477198.8675055 * st) - (0.0087414 * st2) + (st3 / 69699) - (st4 / 14712000)) * D2R;

    // Moon's argument of latitude (mean distance from ascending node) (AA 47.5)
    var F = rev(93.2720950 + (483202.0175233 * st) - (0.0036539 * st2) - (st3 / 3526000) + (st4 / 863310000)) * D2R;

    // Mean elongation of the Moon from the Sun (AA 47.2)
    D = rev(297.8501921 + (445267.1114034 * st) - (0.0018819 * st2) + (st3 / 545868) - (st4 / 113065000)) * D2R;

    // Earth's eccentricity (AA 47.6)
    var E = 1.0 - (0.002516 * st) - (0.0000074 * st2);

    // Libration
    var K1 = rev(119.75 + (131.849 * st)) * D2R;
    var K2 = rev(72.56 + (20.186 * st)) * D2R;

    var rho = -0.02752 * Math.cos(M1);
    rho -= 0.02245 * Math.sin(F);
    rho += 0.00684 * Math.cos(M1 - (2.0 * F));
    rho -= 0.00293 * Math.cos(2.0 * F);
    rho -= 0.00085 * Math.cos(2.0 * (F - D));
    rho -= 0.00054 * Math.cos(M1 - (2.0 * D));
    rho -= 0.00020 * Math.sin(M1 + F);
    rho -= 0.00020 * Math.cos(M1 + (2.0 * F));
    rho -= 0.00020 * Math.cos(M1 - F);
    rho += 0.00014 * Math.cos(M1 + (2.0 * (F - D)));

    var sigma = -0.02816 * Math.sin(M1);
    sigma += 0.02244 * Math.cos(F);
    sigma -= 0.00682 * Math.sin(M1 - (2.0 * F));
    sigma -= 0.00279 * Math.sin(2.0 * F);
    sigma -= 0.00083 * Math.sin(2.0 * (F - D));
    sigma += 0.00069 * Math.sin(M1 - (2.0 * D));
    sigma += 0.00040 * Math.cos(M1 + F);
    sigma -= 0.00025 * Math.sin(2.0 * M1);
    sigma -= 0.00023 * Math.sin(M1 + (2.0 * F));
    sigma += 0.00020 * Math.cos(M1 - F);
    sigma += 0.00019 * Math.sin(M1 - F);
    sigma += 0.00013 * Math.sin(M1 + 2.0 * (F - D));
    sigma -= 0.00010 * Math.cos(M1 - (3.0 * F));

    var tau = 0.02520 * E * Math.sin(M);
    tau += 0.00473 * Math.sin(2.0 * (M1 - F));
    tau -= 0.00467 * Math.sin(M1);
    tau += 0.00396 * Math.sin(K1);
    tau += 0.00276 * Math.sin(2.0 * (M1 - D));
    tau += 0.00196 * Math.sin(omega);
    tau -= 0.00183 * Math.cos(M1 - F);
    tau += 0.00115 * Math.sin(M1 - (2.0 * D));
    tau -= 0.00096 * Math.sin(M1 - D);
    tau += 0.00046 * Math.sin(2.0 * (F - D));
    tau -= 0.00039 * Math.sin(M1 - F);
    tau -= 0.00032 * Math.sin(M1 - M - D);
    tau += 0.00027 * Math.sin(2.0 * (M1 - D) - M);
    tau += 0.00023 * Math.sin(K2);
    tau -= 0.00014 * Math.sin(2.0 * D);
    tau += 0.00014 * Math.cos(2.0 * (M1 - F));
    tau -= 0.00012 * Math.sin(M1 - (2.0 * F));
    tau -= 0.00012 * Math.sin(2.0 * M1);
    tau += 0.00011 * Math.sin(2.0 * (M1 - M - D));

    var I = 1.54242 * D2R;
    var W = gMoonData.lambda - (DeltaPsi * D2R) - omega;
    W = revrad(W);
    // Optical libration in longitude
    var A = Math.atan2((Math.sin(W) * Math.cos(gMoonData.beta) * Math.cos(I)) - (Math.sin(gMoonData.beta) * Math.sin(I)), Math.cos(W) * Math.cos(gMoonData.beta));
    A = revrad(A);
    l = A - F;
    // Optical libration in latitude
    var b = Math.asin((-Math.sin(W) * Math.cos(gMoonData.beta) * Math.sin(I)) - (Math.sin(gMoonData.beta) * Math.cos(I)));
    // Physical libration in longitude
    var l2 = -tau + ((rho * Math.cos(A)) + (sigma * Math.sin(A))) * Math.tan(b);
    // Physical libration in latitude
    var b2 = (sigma * Math.cos(A)) - (rho * Math.sin(A));

    tmp = (l * R2D) + l2;
    if (tmp > 9.0)
      tmp -= 360.0;
    else if (tmp < -9.0)
      tmp += 360.0;
    mid[48] = tmp;
    mid[49] = (b * R2D) + b2;

    // Polar angle
    rho *= D2R;
    var V = omega + (DeltaPsi * D2R) + (sigma * D2R / Math.sin(I));
    var X = Math.sin(I + rho) * Math.sin(V);
    var Y = (Math.sin(I + rho) * Math.cos(V) * Math.cos(epsilon * D2R)) - (Math.cos(I + rho) * Math.sin(epsilon * D2R));
    W = Math.atan2(X, Y);
    W = revrad(W);
    var PA = revrad(Math.asin(Math.sqrt((X * X) + (Y * Y)) * Math.cos((malpha * D2R) - W) / Math.cos(b)));

    mid[50] = PA * R2D;

    mid[51] = getsn(jd);	// Sun axis from celestial north
  }

  return circumstances;
}

//
// Return an angle between 0 and 360 degrees
function rev( angle )
{
  return angle - (360.0 * Math.floor(angle / 360.0));
}

//
// Return an angle between 0 and 2PI radians
function revrad( angle )
{
  return angle - ((Math.PI * 2.0) * Math.floor(angle / (Math.PI * 2.0)));
}

function equatorial2ecliptical( obj, obliquity )
{
  obj.lambda = Math.atan2((Math.sin(obj.topoRA) * Math.cos(obliquity)) + (Math.tan(obj.topoDec) * Math.sin(obliquity)), Math.cos(obj.topoRA));
  obj.lambda = revrad(obj.lambda);

  obj.beta = Math.asin((Math.sin(obj.topoDec) * Math.cos(obliquity)) - (Math.cos(obj.topoDec) * Math.sin(obliquity) * Math.sin(obj.topoRA)));
}

//
// Calculate maximum eclipse
function getmid( )
{
  mid[0] = 0;
  mid[1] = 0.0;
  var iter = 0;
  var tmp = 1.0;
  timelocdependent(mid);
  while (((tmp > 0.000001) || (tmp < -0.000001)) && (iter < 50))
  {
    tmp = ((mid[24] * mid[26]) + (mid[25] * mid[27])) / mid[30];
    mid[1] -= tmp;
    timelocdependent(mid);
    iter++;
  }
}

//
// Populate the c1, c2, mid, c3 and c4 arrays
function getall()
{
  var index = obsvconst[6];
  f1 = Math.atan(elements[26 + index]);
  f2 = Math.atan(elements[27 + index]);

  getmid();
  observational(mid);
  PV[2] = getpv(mid);
  // m, magnitude and Moon/Sun ratio
  mid[36] = Math.sqrt((mid[24] * mid[24]) + (mid[25] * mid[25]));
  mid[37] = (mid[28] - mid[36]) / (mid[28] + mid[29]);
  mid[38] = (mid[28] - mid[29]) / (mid[28] + mid[29]);
  if (mid[37] > 0.0)
  {
    getc1c4();
    if ((mid[36] < mid[29]) || (mid[36] < -mid[29]))
    {
      getc2c3();
      if (mid[29] < 0.0)
        mid[39] = 3; // Total solar eclipse
      else
        mid[39] = 2; // Annular solar eclipse
      observational(c2);
      V[0] = rev(360.0 - (c2[34] * R2D));
      PV[1] = getpv(c2);
      observational(c3);
      V[1] = rev(360.0 - (c3[34] * R2D));
      PV[3] = getpv(c3);
      c2[36] = 999.9;
      c3[36] = 999.9;

      var Mes = 0;
      var VSOP = 1;
      if ( Mes != 1 )
        Mes = 0;
      if ( VSOP != 1 )
        VSOP = 0;
      gMes = Mes;
    }
    else
      mid[39] = 1; // Partial eclipse
    observational(c1);
    PV[0] = getpv(c1);
    observational(c4);
    PV[4] = getpv(c4);
  }
  else
    mid[39] = 0; // No eclipse

  c1_alt[0] = c1[45] * R2D; // Sun
  c1_azi[0] = c1[46] * R2D;
  if (c1_azi[0] < 0.0)
    c1_azi[0] += 360.0;
  else if (c1_azi[0] >= 360.0)
    c1_azi[0] -= 360.0;
  c1_rad[0] = c1[43] * 100;
  c2_alt[0] = c2[45] * R2D;
  c2_azi[0] = c2[46] * R2D;
  if (c2_azi[0] < 0.0)
    c2_azi[0] += 360.0;
  else if (c2_azi[0] >= 360.0)
    c2_azi[0] -= 360.0;
  c2_rad[0] = c2[43] * 100;
  mid_alt[0] = mid[45] * R2D;
  mid_azi[0] = mid[46] * R2D;
  if (mid_azi[0] < 0.0)
    mid_azi[0] += 360.0;
  else if (mid_azi[0] >= 360.0)
    mid_azi[0] -= 360.0;
  mid_rad[0] = mid[43] * 100;
  c3_alt[0] = c3[45] * R2D;
  c3_azi[0] = c3[46] * R2D;
  if (c3_azi[0] < 0.0)
    c3_azi[0] += 360.0;
  else if (c3_azi[0] >= 360.0)
    c3_azi[0] -= 360.0;
  c3_rad[0] = c3[43] * 100;
  c4_alt[0] = c4[45] * R2D;
  c4_azi[0] = c4[46] * R2D;
  if (c4_azi[0] < 0.0)
    c4_azi[0] += 360.0;
  else if (c4_azi[0] >= 360.0)
    c4_azi[0] -= 360.0;
  c4_rad[0] = c4[43] * 100;

  c1_alt[1] = c1[41] * R2D; // Moon
  c1_azi[1] = c1[42] * R2D;
  if (c1_azi[1] < 0.0)
    c1_azi[1] += 360.0;
  else if (c1_azi[1] >= 360.0)
    c1_azi[1] -= 360.0;
  c1_rad[1] = c1[44] * 100;
  c2_alt[1] = c2[41] * R2D;
  c2_azi[1] = c2[42] * R2D;
  if (c2_azi[1] < 0.0)
    c2_azi[1] += 360.0;
  else if (c2_azi[1] >= 360.0)
    c2_azi[1] -= 360.0;
  c2_rad[1] = c2[44] * 100;
  mid_alt[1] = mid[41] * R2D;
  mid_azi[1] = mid[42] * R2D;
  if (mid_azi[1] < 0.0)
    mid_azi[1] += 360.0;
  else if (mid_azi[1] >= 360.0)
    mid_azi[1] -= 360.0;
  mid_rad[1] = mid[44] * 100;
  c3_alt[1] = c3[41] * R2D;
  c3_azi[1] = c3[42] * R2D;
  if (c3_azi[1] < 0.0)
    c3_azi[1] += 360.0;
  else if (c3_azi[1] >= 360.0)
    c3_azi[1] -= 360.0;
  c3_rad[1] = c3[44] * 100;
  c4_alt[1] = c4[41] * R2D;
  c4_azi[1] = c4[42] * R2D;
  if (c4_azi[1] < 0.0)
    c4_azi[1] += 360.0;
  else if (c4_azi[1] >= 360.0)
    c4_azi[1] -= 360.0;
  c4_rad[1] = c4[44] * 100;
}

//
// Read the data that's in the form, and populate the obsvconst array
function readform()
{
  // Make sure that we have something to parse from the form
  if (inputs.latd == "")
    inputs.latd = "0";
  if (inputs.latm == "")
    inputs.latm = "0";
  if (inputs.lond == "")
    inputs.lond = "0";
  if (inputs.lonm == "")
    inputs.lonm = "0";
  if (inputs.alt == "")
    inputs.alt = "0";

  inputs.alt = Math.abs(parseFloat(inputs.alt));

  // Get the latitude
  if(inputs.lat != null) {
    obsvconst[0] = parseFloat(inputs.lat, 10);
    outputs.lat = obsvconst[0];
  } else {
    inputs.latd = Math.abs(parseFloat(inputs.latd));
    if (inputs.latm < 10.0)
      inputs.latm = "0" + inputs.latm;
    if ( convert2dd(1) == false )
      return false;

    obsvconst[0] = parseInt(inputs.latd, 10);
    obsvconst[0] += (parseFloat(inputs.latm) / 60.0);
    if ( checkDMS(1, obsvconst[0]) == false )
    {
      error = "The latitude in degrees must be between 0\xBA and 90\xBA.";
      return false;
    }
    obsvconst[0] *= inputs.latx;
  }
  gLat = obsvconst[0];
  obsvconst[0] *= D2R;

  // Get the longitude
  if(inputs.lon != null) {
    obsvconst[1] = parseFloat(inputs.lon, 10);
    outputs.lon = obsvconst[1];
    obsvconst[1] = -obsvconst[1];
  } else {
    inputs.lond = Math.abs(parseFloat(inputs.lond));
    if (inputs.lonm < 10.0)
      inputs.lonm = "0" + inputs.lonm;
    if ( convert2dd(2) == false )
      return false;

    obsvconst[1] = parseInt(inputs.lond, 10);
    obsvconst[1] += (parseFloat(inputs.lonm) / 60.0);
    if ( checkDMS(2, obsvconst[1]) == false )
    {
      error = "The longitude in degrees must be between 0\xBA and 180\xBA.";
      return false;
    }
    obsvconst[1] *= inputs.lonx;
  }
  gLng = obsvconst[1];
  obsvconst[1] *= D2R;

  //console.log("obsvconst 0, 1", obsvconst[0], obsvconst[1]);

  // Get the altitude
  obsvconst[2] = parseFloat(inputs.alt);

  // Get the time zone
  obsvconst[3] = parseFloat(inputs.tzh);
  obsvconst[3] += (parseFloat(inputs.tzm) / 60.0);
  obsvconst[3] *= parseFloat(inputs.tzx);
  obsvconst[3] -= parseFloat(inputs.dst);

  // Get the observer's geocentric position
  var tmp = Math.atan(0.996647189335 * Math.tan(obsvconst[0]));
  obsvconst[4] = (0.996647189335 * Math.sin(tmp)) + (obsvconst[2] * Math.sin(obsvconst[0]) / 6378137.0);
  obsvconst[5] = Math.cos(tmp) + (obsvconst[2] * Math.cos(obsvconst[0]) / 6378137.0);

  // Get the index for the selected eclipse
  obsvconst[6] = 28 * (parseInt(inputs.eclipse_index, 10) + 65);

  return true;
}

//
// Check the latitude/longitude bounds
function checkDMS( type, checkLatLon )
{
  var toCheck = Math.abs(checkLatLon);

  if ( type == 1) // Latitude
  {
    if ( toCheck <= 90.0 )
      return true;
    else
      return false;
  }
  else // Longitude
  {
    if ( toCheck <= 180.0 )
      return true;
    else
      return false;
  }
}

//
// Read the deltaT value for the selected eclipse
function getdTValue()
{
  var index = 28 * (parseInt(inputs.eclipse_index, 10) + 65);
  var deltaT = elements[5 + index];

  outputs.deltaT = deltaT;

  //var tmp = deltaT.toFixed(1);
  //outputs.deltaT = tmp;
}

//
// Read the deltaT numeric value for the selected eclipse
function getdT( )
{
  var index = 28 * (parseInt(inputs.eclipse_index, 10) + 65);
  var deltaT = elements[5 + index];

  var tmp = deltaT.toFixed(2);

  return tmp;
}

//
// Convert the location coordinates to decimal notation
function convert2dd( which )
{
  var ddStr;

  if ( which == 1 ) // Latitude
  {
    ddStr = parseInt(inputs.latd, 10);
    ddStr += parseFloat((inputs.latm == "") ? "0.0" : inputs.latm) / 60.0;
    if ( ! isNaN(ddStr) )
    {
      ddStr = Math.abs(ddStr);
      if ( ddStr > 90.0 )
      {
        error = "Please enter a latitude between 0 and 90 degrees, North or South.";
        return false;
      }
      if ( inputs.latx == -1 ) // South
        ddStr = -ddStr;
      outputs.lat = ddStr;
      //ddStr = ddStr.toFixed(5);
      //outputs.lat = "&#160;&#8212;&#62;&#160;" + ddStr + "&#176;";
    }
    else
    {
      outputs.lat = null;
    }
  }
  else // Longitude
  {
    ddStr = parseInt(inputs.lond, 10);
    ddStr += parseFloat((inputs.lonm == "") ? "0.0" : inputs.lonm) / 60.0;
    if ( ! isNaN(ddStr) )
    {
      ddStr = Math.abs(ddStr);
      if ( ddStr > 180.0 )
      {
        error = "Please enter a longitude between 0 and 180 degrees, East or West.";
        return false;
      }
      if ( inputs.lonx == 1 ) // West
        ddStr = -ddStr;
      outputs.lon = ddStr;
      //ddStr = ddStr.toFixed(5);
      //outputs.lon = "&#160;&#8212;&#62;&#160;" + ddStr + "&#176;";
    }
    else
    {
      outputs.lon = null;
    }
  }

  return true;
}

/* Location mapping */
var xWidth = 368; // Width of the total map in pixels
var yHeight = 184; // Height of the total map in pixels
var xOffset = 184; // x offset of the map in pixels
var yOffset = 92; // y offset of the map in pixels

function lng2x( longitude )
{
  return(xOffset + Math.round((longitude * xWidth) / 360));
}

function lat2y( latitude )
{
  return(yOffset - Math.round((latitude * yHeight) / 180));
}

function x2lng( x )
{
  return(360 * (x - xOffset) / xWidth);
}

function y2lat( y )
{
  return(180 * (yOffset - y) / yHeight);
}

//
// Clear the form results
function clearresults( )
{
  outputs.timeZone = "";

  outputs.c1_date = "";
  outputs.c1_time = "";
  outputs.c1_timestamp = null;
  outputs.c1_alt = null;
  outputs.c1_azi = null;
  outputs.c1_p = null;
  outputs.c1_v = null;
  outputs.c2_date = "";
  outputs.c2_time = "";
  outputs.c2_timestamp =null;
  outputs.c2_alt = null;
  outputs.c2_azi = null;
  outputs.c2_p = null;
  outputs.c2_v = null;
  outputs.c2_lc = null;
  outputs.mid_date = "";
  outputs.mid_time = "";
  outputs.mid_timestamp = null;
  outputs.mid_alt = null;
  outputs.mid_azi = null;
  outputs.mid_p = null;
  outputs.mid_v = null;
  outputs.c3_date = "";
  outputs.c3_time = "";
  outputs.c3_timestamp = null;
  outputs.c3_alt = null;
  outputs.c3_azi = null;
  outputs.c3_p = null;
  outputs.c3_v = null;
  outputs.c3_lc = null;
  outputs.c4_date = "";
  outputs.c4_time = "";
  outputs.c4_timestamp = null;
  outputs.c4_alt = null;
  outputs.c4_azi = null;
  outputs.c4_p = null;
  outputs.c4_v = null;
  outputs.type = "";
  outputs.duration = "";
  outputs.durationSeconds = null;

  outputs.mag = null;
  outputs.ratio = null;
  outputs.coverage = null;
  outputs.depth = null;
  outputs.depthName = "";
  outputs.libl = null;
  outputs.libb = null;
  outputs.pac = null;

  gCircumstancesComputed = false;
}

//
// Handle a location modification
function modifiedCoordinates( which )
{
  clearresults();
  convert2dd(which);
}

function changeEclipse()
{
  if ( location.search.length > 1 )
  {
    location.search = ""; // Clear the url => reload the page with default values
    var Eclipse = "20080801";
    var Lat = 0.0;
    var Lng = 0.0;
    var Alt = 0;
    var TZ = "+0000";
    var DST = 0;
    var Calc = 0;
  }

  resetCalculator();
}

function resetCalculator()
{
  error = null;
  clearresults();
  getdTValue();
  gCircumstancesComputed = false;
}

//
// Get the local date of an event (see AA p.63 or http://aa.usno.navy.mil/js/JulianDate.js)
function getdate( circumstances )
{
  var index, t, ans, jd, a, b, c, d, e, year, sign;

  index = obsvconst[6];
  // JD for noon (TDT) the day before the day that contains T0
  jd = Math.floor(elements[index] - (elements[1 + index] / 24.0));
  // Local time (ie the offset in hours since midnight TDT on the day containing T0) to the nearest 0.1 sec
  t = circumstances[1] + elements[1 + index] - obsvconst[3] - ((elements[5 + index] - 0.05) / 3600.0);
  if (t < 0.0)
    jd--;
  else if (t >= 24.0)
    jd++;
  if (jd >= 2299160.5)
  {
    a = Math.floor((jd - 1867216.25) / 36524.25);
    a += jd + 1.0 - Math.floor(a / 4.0);
  }
  else
    a = jd;
  b = a + 1525.0;
  c = Math.floor((b - 122.1) / 365.25);
  d = Math.floor(365.25 * c);
  e = Math.floor((b - d) / 30.6001);
  d = b - d - Math.floor(30.6001 * e);
  if (e < 13.5)
    e -= 1;
  else
    e -= 13;
  if (e > 2.5)
    year = c - 4716;
  else
    year = c - 4715;
  if (year >= 0)
    sign = 1;
  else
    sign = -1;
  year = Math.abs(year);
  if (year < 10)
    year = "000" + year;
  else if (year < 100)
    year = "00" + year;
  else if (year < 1000)
    year = "0" + year;
  if (sign == -1)
    year = "-" + year;

  ans = year + "/";
  if (e < 10)
    ans += "0";
  ans += e + "/";
  if (d < 10)
    ans += "0";
  ans += d;

  return ans;
}

//
// Get the UT date of an event
function getnumUTdate( circumstances, numDate )
{
  var index, jd, a, b, c, d, e;

  index = obsvconst[6];
  // JD for noon (TDT) the day before the day that contains T0
  jd = Math.floor(elements[index] - (elements[1 + index] / 24.0));
  // Local time (ie the offset in hours since midnight TDT on the day containing T0) to the nearest 0.1 sec
//  t = circumstances[1] + elements[1 + index] - obsvconst[3] - ((elements[5 + index] - 0.05) / 3600.0);
  // UT time (ie the offset in hours since midnight TDT on the day containing T0) to the nearest 0.1 sec
  t = circumstances[1] + elements[1 + index] - ((elements[5 + index] - 0.05) / 3600.0);
  if (t < 0.0)
    jd--;
  else if (t >= 24.0)
    jd++;
  if (jd >= 2299160.5)
  {
    a = Math.floor((jd - 1867216.25) / 36524.25);
    a += jd + 1.0 - Math.floor(a / 4.0);
  }
  else
    a = jd;
  b = a + 1525.0;
  c = Math.floor((b - 122.1) / 365.25);
  d = Math.floor(365.25 * c);
  e = Math.floor((b - d) / 30.6001);
  d = b - d - Math.floor(30.6001 * e);
  if (e < 13.5)
    e -= 1;
  else
    e -= 13;
  if (e > 2.5)
    numDate.year = c - 4716;
  else
    numDate.year = c - 4715;
  numDate.month = e;
  numDate.day = d;
}

//
// Get the local time of an event
function gettime( circumstances )
{
  var ans = "";
  var index = obsvconst[6];
  // Local time to the nearest 0.1 sec
  var t = circumstances[1] + elements[1 + index] - obsvconst[3] - ((elements[5 + index] - 0.05) / 3600.0);
  if (t < 0.0)
    t += 24.0;
  else if (t >= 24.0)
    t -= 24.0;
  if (t < 10.0)
    ans += "0";
  ans += Math.floor(t) + ":";
  t = (t - Math.floor(t)) * 60.0;
  if (t < 10.0)
    ans += "0";
  ans += Math.floor(t) + ":";
  t = (t - Math.floor(t)) * 60.0;
  if (t < 10.0)
    ans += "0";
  ans += Math.floor(t);
  ans += ".";
  ans += Math.floor(10.0 * (t - Math.floor(t)));
  // Add an asterix if the altitude is less than zero (take refraction into account)
  if (circumstances[32] <= gRefractionHeight)
    ans += "*";

  return ans;
}

//
// Julian day from the beginning of the year -4712 at noon UT
function getjd( circumstances, index )
{
  var y, m, a, b;
  var numDate = new Object();

  getnumUTdate(circumstances, numDate);
  numDate.time = elements[1 + index] + circumstances[1] - (elements[5 + index] / 3600.0);
  if (numDate.time < 0.0)
    numDate.time += 24.0;
  else if (numDate.time >= 24.0)
    numDate.time -= 24.0;

  var gregorian = true;
  if ( numDate.year < 1582 )
    gregorian = false;
  else if ( numDate.year == 1582 )
  {
    if ( ( numDate.month < 10 ) || ( ( numDate.month == 10 ) && ( numDate.day < 15 ) ) )
      gregorian = false;
  }
  if ( numDate.month > 2 )
  {
    y = numDate.year;
    m = numDate.month;
  }
  else
  {
    y = numDate.year - 1;
    m = numDate.month + 12;
  }

  a = truncate(y / 100);
  if ( gregorian )
    b = 2 - a + truncate(a / 4);
  else
    b = 0.0;
  var jd = truncate(365.25 * (y + 4716)) + truncate(30.6001 * (m + 1)) + numDate.day + b - 1524.5;
  jd += numDate.time / 24.0;

  return jd;
}

//
// Get the altitude
function getalt( circumstances )
{
  var t, ans;

  t = (circumstances[32] * R2D) + 0.05;
  return t;
  //if (t < 0.0)
  //{
  //  ans = "-";
  //  t = -t;
  //}
  //else
  //  ans = "+";
  //var tmp = Math.floor(t);
  //if (tmp < 10.0)
  //  ans += "0";
  //ans += tmp;
  //ans += ".";
  //ans += Math.floor(10.0 * (t - tmp));
  //ans += "\xB0";

  //return ans;
}

//
// Get the adjusted altitude for refraction
function getadjalt( circumstances )
{
  var ans = "";

  var t = elevationRefraction(circumstances[32] * R2D) + 0.05;
  if (t < 0.0)
  {
    ans = "-";
    t = -t;
  }
  var tmp = Math.floor(t);
  ans += tmp;
  ans += ".";
  ans += Math.floor(10.0 * (t - tmp));
  ans += "\xB0 with refraction";

  return ans;
}

//
// Get the azimuth
function getazi( circumstances )
{
  //var ans = "";
  var t = circumstances[35] * R2D;
  if (t < 0.0)
    t += 360.0;
  else if (t >= 360.0)
    t -= 360.0;
  t += 0.05;
  if (t >= 360.0)
    t -= 360.0;
  return t;

  //var tmp = Math.floor(t);
  //if (tmp < 100.0)
  //  ans += "0";
  //if (tmp < 10.0)
  //  ans += "0";
  //ans += tmp;
  //ans += ".";
  //ans += Math.floor(10.0 * (t - tmp));
  //ans += "\xB0";

  //return ans;
}

//
// Get P
function getp( circumstances )
{
  //var ans = "";
  var t = circumstances[31] * R2D;
  if (t < 0.0)
    t += 360.0;
  else if (t >= 360.0)
    t -= 360.0;
  return t;

  //t = Math.floor(t + 0.5);
  //if (t < 100.0)
  //  ans += "0";
  //if (t < 10.0)
  //  ans += "0";
  //ans += t;
  //ans += "\xB0";

  //return ans;
}

//
// Get V
function getv( circumstances )
{
  //var ans = "";
  var t = Math.floor(120.5 - circumstances[34] * 60.0 / Math.PI) / 10.0;
  while (t > 13.0)
    t -= 12.0;
  while (t < 1.0)
    t += 12.0;
  return t;
  //if (t < 10.0)
  //  ans += "0";
  //ans += Math.floor(t);
  //ans += ".";
  //ans += Math.floor(t * 10.0 - 10.0 * Math.floor(t)).toString();

  //return ans;
}

function getpv( circumstances )
{
  var p = circumstances[31] * R2D;
  while (p < 0.0)
    p += 360.0;
  while (p >= 360.0)
    p -= 360.0;

  var v = 360 - (circumstances[34] * R2D);
  while (v < 0.0)
    v += 360.0;
  while (v >= 360.0)
    v -= 360.0;

  var ans = p + v;
  while (ans < 0.0)
    ans += 360.0;
  while (ans >= 360.0)
    ans -= 360.0;

  return ans;
}

//
// Sun axis from celestial north
function getsn( jd )
{
  var t = (jd - 2396758.0) / 36525.0;	// Number of centuries since 1850 (1849 December 31 at 12UT)
  var T = (jd - 2415020.0) / 36525.0;	// Number of centuries since 1 Jan 1900 noon ET (1899 December 31 at 12UT)
  var kks = 73.666667 + (1.3958333 * t);	// Longitude of the ascending node of the solar equator on the ecliptic
  var kkm = 259.183275 - ((1934.142008 - (0.002078 * T)) * T);	// Longitude of the ascending node of the Moon orbit
  var G = (0.0000739 * Math.sin((31.8 + (119.0 * T)) * D2R)) + (0.0017778 * Math.sin((231.19 + (20.2 * T)) * D2R)) + (0.00052 * Math.sin((57.24 + (150.27 * T)) * D2R));	// Long term corrections on the solar longitude
  var L = 279.696678 + ((36000.768925 + (0.0003025 * T)) * T) + G;	// Mean longitude of the Sun
  var M = 358.475833 + ((35999.04975 - (0.00015 * T)) * T) + G;	// Mean anomaly of the Sun
  var C = ((1.9194603 - (0.0047889 * T) - (0.0000144 * T * T)) * Math.sin(M * D2R)) + ((0.0200939 - 0.0001003 * T) * Math.sin(2.0 * M * D2R)) + (0.0002925 * Math.sin(3.0 * M * D2R)) + (0.000005 * Math.sin(4.0 * M * D2R));	// Equation of the center
  var v = M + C;	// True anomaly
  var lambda = L + C - (0.0056933 * (1.0 + (0.01671 * Math.cos(v * D2R))));	// Apparent longitude of the Sun (without nutation)
  var nutL = (-0.00479 * Math.sin(kkm * D2R)) - (0.00035 * Math.sin(2.0 * L * D2R));	// Nutation in longitude
  var nutI = (0.00256 * Math.cos(kkm * D2R)) + (0.00015 * Math.cos(2.0 * L * D2R));	// Nutation in obliquity
  var lambdaS = lambda + nutL;	// Apparent longitude of the Sun with nutation
  var epsilon = 23.452294 - ((0.0130125 + (0.0000016 * T)) * T) + nutI;	// Obliquity of the ecliptic
  var i = 7.25 * D2R;	// Inclination of the solar equator to the ecliptic
  var lambdamK = (lambda - kks) * D2R;
  var x = Math.atan(-Math.cos(lambdaS * D2R) * Math.tan(epsilon * D2R)) * R2D;	// +/- 90 degrees
  var y = Math.atan(-Math.cos(lambdamK) * Math.tan(i)) * R2D;	// +/- 90 degrees

  return(rev(x + y));	// Solar position angle
}

//
// Get the limb correction
function getlc( circumstances )
{
  var ans = "";
  if (((circumstances[0] == 1) || (circumstances[0] == -1)) && (circumstances[36] < 999.9))
  {
    var t;

    if (circumstances[36] < 0.0)
    {
      ans = "-";
      t = -circumstances[36];
    }
    else
    {
      ans = "+";
      t = circumstances[36];
    }
    t = Math.floor(t * 10.0 + 0.5) / 10.0;
    ans += Math.floor(t).toString();
    ans += ".";
    ans += Math.floor(t * 10.0 - 10.0 * Math.floor(t)).toString();
    ans += "s";
  }

  return ans;
}

//
// Display the information about 1st and 4th contact
function displayc1c4( )
{
  outputs.c1_date = getdate(c1);
  outputs.c1_time = gettime(c1);
  outputs.c1_timestamp = Date.parse(outputs.c1_date + " " + outputs.c1_time + " GMT");
  outputs.c1_alt = getalt(c1);
  outputs.c1_azi = getazi(c1);
  outputs.c1_p = getp(c1);
  outputs.c1_v = getv(c1);
  outputs.c4_date = getdate(c4);
  outputs.c4_time = gettime(c4);
  outputs.c4_timestamp = Date.parse(outputs.c4_date + " " + outputs.c4_time + " GMT");
  outputs.c4_alt = getalt(c4);
  outputs.c4_azi = getazi(c4);
  outputs.c4_p = getp(c4);
  outputs.c4_v = getv(c4);
}

//
// Display the information about 2nd and 3rd contact
function displayc2c3( )
{
  outputs.c2_date = getdate(c2);
  outputs.c2_time = gettime(c2);
  outputs.c2_timestamp = Date.parse(outputs.c2_date + " " + outputs.c2_time + " GMT");
  outputs.c2_alt = getalt(c2);
  outputs.c2_azi = getazi(c2);
  outputs.c2_p = getp(c2);
  outputs.c2_v = getv(c2);
  outputs.c2_lc = getlc(c2);
  outputs.c3_date = getdate(c3);
  outputs.c3_time = gettime(c3);
  outputs.c3_timestamp = Date.parse(outputs.c3_date + " " + outputs.c3_time + " GMT");
  outputs.c3_alt = getalt(c3);
  outputs.c3_azi = getazi(c3);
  outputs.c3_p = getp(c3);
  outputs.c3_v = getv(c3);
  outputs.c3_lc = getlc(c3);
}

//
// Display the information about maximum eclipse
function displaymid( )
{
  outputs.mid_date = getdate(mid);
  outputs.mid_time = gettime(mid);
  outputs.mid_timestamp = Date.parse(outputs.mid_date + " " + outputs.mid_time + " GMT");
  outputs.mid_alt = getalt(mid);
  outputs.mid_azi = getazi(mid);
  outputs.mid_p = getp(mid);
  outputs.mid_v = getv(mid);
}

//
// Get the duration in 00m 00.0s format
function getduration( )
{
  var tmp = c3[1] - c2[1];
  if (tmp < 0.0)
    tmp += 24.0;
  else if (tmp >= 24.0)
    tmp -= 24.0;
  tmp = (tmp * 60.0) - 60.0 * Math.floor(tmp) + 0.05 / 60.0;
  var ans = Math.floor(tmp) + "m ";
  tmp = (tmp * 60.0) - 60.0 * Math.floor(tmp);
  if (tmp < 10.0)
    ans += "0";
  ans += Math.floor(tmp);
  ans += ".";
  ans += Math.floor((tmp - Math.floor(tmp)) * 10.0).toString() + "s";

  return ans;
}

//
// Get the corrected duration in 00m 00.0s format
function getcorrectedduration( )
{
  var tmp, ans;

  tmp = c3[1] - c2[1] + ((c3[36] - c2[36]) / 3600.0);
  if (tmp < 0.0)
    tmp = 0.0;
  else if (tmp >= 24.0)
    tmp -= 24.0;
  tmp = (tmp * 60.0) - 60.0 * Math.floor(tmp) + 0.05 / 60.0;
  ans = "[" + Math.floor(tmp) + "m ";
  tmp = (tmp * 60.0) - 60.0 * Math.floor(tmp);
  if (tmp < 10.0)
    ans += "0";
  ans += Math.floor(tmp);
  ans += ".";
  ans += Math.floor((tmp - Math.floor(tmp)) * 10.0).toString() + "s]";

  return ans;
}

//
// Get the duration in seconds
function getdurationseconds( )
{
  var tmp = c3[1] - c2[1];
  if (tmp < 0.0)
    tmp = 0.0;
  else if (tmp >= 24.0)
    tmp -= 24.0;
  tmp *= 3600.0;

  return tmp.toFixed(3);
}

//
// Get the obscuration
function getcoverage( )
{
  var a, b, c;

  if (mid[37] <= 0.0)
  {
    return 0.0;
  }
  else if (mid[37] >= 1.0)
  {
    return 1.0;
  }
  if (mid[39] == 2)
    c = mid[38] * mid[38];
  else
  {
    c = Math.acos((mid[28] * mid[28] + mid[29] * mid[29] - 2.0 * mid[36] * mid[36]) / (mid[28] * mid[28] - mid[29] * mid[29]));
    b = Math.acos((mid[28] * mid[29] + mid[36] * mid[36]) / mid[36] / (mid[28] + mid[29]));
    a = Math.PI - b - c;
    c = ((mid[38] * mid[38] * a + b) - mid[38] * Math.sin(c)) / Math.PI;
  }
  return c;
  //var ans = (c * 100).toFixed(3);
  //ans += "%";

  //return ans;
}

//
// Get the (Ant)Umbral depth
// Entry condition - there is a total or annular eclipse
function getdepth( )
{
  var depth = mid[36] / mid[29];
  if (depth < 0.0)
    depth = 1.0 + depth;
  else
    depth = 1.0 - depth;
  return depth;
  //var ans = (depth * 100.0).toFixed(2);
  //ans += "%";

  //return ans;
}

//
// Get the moon's libration in longitude
// Entry condition - there is an eclipse
function getlibrationl( )
{
  var l = mid[48];
  return l;
  //var ans = l.toFixed(2);
  //ans += "\xB0";

  //return ans;
}

//
// Get the moon's libration in longitude
// Entry condition - there is an eclipse
function getlibrationb( )
{
  var b = mid[49];
  return b;
  //var ans = b.toFixed(2);
  //ans += "\xB0";

  //return ans;
}

//
// Get the moon's libration in longitude
// Entry condition - there is an eclipse
function getpac( )
{
  var c = mid[50];
  return c;
  //var ans = c.toFixed(2);
  //ans += "\xB0";

  //return ans;
}

//
// calculate
function calculate( )
{
  clearresults();
  if ( readform() == false )
    return false;
  getall();
  getdTValue();
  displaymid();
  outputs.mag = mid[37];//.toFixed(5);
  outputs.ratio = mid[38];//.toFixed(5);

  // Is there an event?
  if (mid[39] > 0)
  {
    displayc1c4();
    // Is there a total/annular event?
    if (mid[39] > 1)
    {
      displayc2c3();
      // Is the Sun below the horizon for the entire duration of the event?
      if ((c1[32] <= 0.0) && (c4[32] <= 0.0))
      {
        outputs.type = "NONE";
        outputs.duration = null;
        outputs.coverage = null;
        outputs.depth = null;
        outputs.depthName = "Umbral";
        outputs.libl = null;
        outputs.libb = null;
        outputs.pac = null;
      }
      else // ... or is the Sun above the horizon for at least some of the event?
      {
        // Is the Sun below the horizon for just the total/annular event?
        if ((c2[32] <= 0.0) && (c3[32] <= 0.0))
        {
          outputs.type = "Partial";
          outputs.duration = null;
          outputs.durationSeconds = 0;
          outputs.depthName = "Umbral";

          outputs.coverage = null;
          outputs.depth = null;
        }
        else // ... or is the Sun above the horizon for at least some of the total/annular event?
        {
          // Is it an annular event?
          if (mid[39] == 2)
          {
            outputs.type = "Annular";
            outputs.depthName = "Antumbral";
          }
          else // ... or is it a total event?
          {
            outputs.type = "Total";
            outputs.depthName = "Umbral";
          }
          outputs.depth = getdepth();
          outputs.libl = getlibrationl();
          outputs.libb = getlibrationb();
          outputs.pac = getpac();
          var numDate = new Object();
          getnumUTdate(mid, numDate);
          var Mes = 0;
          var VSOP = 1;
          if ( Mes != 1 )
            Mes = 0;
          if ( VSOP != 1 )
            VSOP = 0;
          gMes = Mes;
          //document.getElementById("watts_chart_link").innerHTML = '<a href="../../php/WattsChartBailyBeads.php?DF=15&BB=3.0&RM=' + mid[44] + '&ZM=' + mid[47] + '&RS=' + mid[43] + '&LibL=' + mid[48].toFixed(2) + '&LibB=' + mid[49].toFixed(2) + '&MN=' + mid[50].toFixed(2) + '&PA2=' + rev(c2[31] * R2D) + '&PA3=' + rev(c3[31] * R2D) + '&Dur=' + getdurationseconds() + '&Zen=' + (mid[33] * R2D).toFixed(2) + '&SN=' + mid[51].toFixed(2) + '&Lat=' + gLat + '&Lng=' + (-gLng) + '&Elv=' + obsvconst[2] + '&Y=' + numDate.year + '&M=' + numDate.month + '&D=' + numDate.day + '&T=' + ( (mid[39] == 3) ? 'T' : 'A' ) + '&dT=' + getdT() + '&Lang=en" class="eclipseworldatlas" target="_blank" title="Lunar limb profile and Kaguya/LRO corrections...">Display the lunar limb profile</a>';
          // Is the Sun above the horizon for the entire annular/total event?
          if ((c2[32] > 0.0) && (c3[32] > 0.0)) {
            outputs.duration = getduration();
            outputs.durationSeconds = getdurationseconds();
            outputs.coverage = getcoverage();
          }
          else // ... or is the Sun below the horizon for at least some of the annular/total event
          {
            outputs.duration = null;
            // Is the Sun above the horizon at C2 or C3? (the obscuration remains constant during a total/annular event)
            if ((c2[32] > 0.0) || (c3[32] > 0.0))
              outputs.coverage = getcoverage();
            else
              outputs.coverage = null;
          }
        }
      }
    }
    else // ... or is it just a partial event?
    {
      // Is the Sun below the horizon for the entire event?
      if ((c1[32] <= 0.0) && (c4[32] <= 0.0))
      {
        outputs.type = "NONE";
        outputs.coverage = null;
      }
      else // ... or is the Sun above the horizon for at least some of the event?
      {
        outputs.type = "Partial";
        // Is the Sun below the horizon at maximum eclipse?
        if (mid[32] <= 0.0)
          outputs.coverage = null;
        else // ... or is the Sun above the horizon at maximum eclipse?
          outputs.coverage = getcoverage();
      }
      outputs.c2_date = null;
      outputs.c3_date = null;
      outputs.duration = null;
      outputs.depth = null;
      outputs.depthName = "Umbral";

      outputs.libl = getlibrationl();
      outputs.libb = getlibrationb();
      outputs.pac = getpac();
    }
  }
  else // ... or is there no event at all?
  {
    outputs.type = "NONE";
    outputs.duration = null;
    outputs.coverage = null;
    outputs.depth = null;
    outputs.c1_date = null;
    outputs.c2_date = null;
    outputs.c3_date = null;
    outputs.c4_date = null;
    outputs.depthName = "Umbral";
    outputs.libl = null;
    outputs.libb = null;
    outputs.pac = null;
  }

  if ( obsvconst[3] == 0.0 )
  {
    outputs.timeZone = "GMT";
  }
  else
  {
    outputs.timeZone = "???";
  }

  gCircumstancesComputed = true;

  return true;
}

function truncate( x )
{
  return ( x >= 0.0 ) ? Math.floor(x) : Math.ceil(x);
}

//
// Get the apparent diameter (in arcminutes)
function getdia_sunmoon( circumstances, type )
{
  var t;

  if ( type == 0 ) // Sun
    t = 2.0 * circumstances[43];
  else // Moon
    t = 2.0 * circumstances[44];
  t += 0.0005;
  t *= 60.0;

  var tmp = Math.floor(t);
  var ans = tmp;
  ans += ".";
  ans += Math.floor(10.0 * (t - tmp));

  return ans;
}

function elevationRefraction( elv_geometric )
{
  if ( elv_geometric > 10.2 )
    refraction = 0.01617 * Math.cos(elv_geometric * D2R) / Math.sin(elv_geometric * D2R);
  else
  {
    var a0 = 0.58804392;
    var a1 = -0.17941557;
    var a2 = 0.29906946e-1;
    var a3 = -0.25187400e-2;
    var a4 = 0.82622101e-4;
    var x = Math.abs(elv_geometric + 0.589);
    var x2 = x * x;
    var x3 = x * x2;
    var x4 = x2 * x2;
    refraction = Math.abs(a0 + (a1 * x) + (a2 * x2) + (a3 * x3) + (a4 * x4));
  }
  var elv_observed = elv_geometric + refraction;

  return(elv_observed);
}

exports.calculate = function(inputsObject, callback) {
  inputs = inputsObject;
  inputs.tzh = 0;
  inputs.tzm = 0;
  inputs.tzx = 0; // W = 1, E = -1
  inputs.dst = 0;

  if(inputs.eclipse_index == null) {
    var eclipseEvent = null;
    var compareDate = new Date().getTime() - 48 * 3600 * 1000;
    var found = false;
    for(var tries = 0; tries < 100; tries++) {
      for(var i = 0; i < exports.list.length; i++) { // find the next upcoming eclipse
        if(exports.list[i].date < compareDate) continue;
        if(!eclipseEvent) {
          eclipseEvent = exports.list[i];
        } else {
          if(exports.list[i].date < eclipseEvent.date) {
            eclipseEvent = exports.list[i];
          }
        }
      }
      inputs.eclipse_index = eclipseEvent.index;
      calculate();
      //console.log("searching for eclipse:", inputs.eclipse_index, outputs.c1_timestamp);
      if(outputs.c1_timestamp) {
        found = true;
        break;
      } else {
        compareDate = eclipseEvent.date;
      }
    }
    if(!found) error = "no eclipse found for current location";
  } else {
    calculate();
  }
  outputs.eclipseType = eclipseEvent.type;
  if(!error) {
    exports.data = outputs;
  } else {
    exports.data = null;
  }
  exports.error = error;
  callback && callback(error, outputs);
  return error ? null : outputs;
}

exports.list = [
  { index: -65, date: new Date('1970 Mar 07 00:00:00 GMT').getTime(), type: 'T' },
  { index: -64, date: new Date('1970 Aug 31 00:00:00 GMT').getTime(), type: 'A' },
  { index: -63, date: new Date('1971 Feb 25 00:00:00 GMT').getTime(), type: 'P' },
  { index: -62, date: new Date('1971 Jul 22 00:00:00 GMT').getTime(), type: 'P' },
  { index: -61, date: new Date('1971 Aug 20 00:00:00 GMT').getTime(), type: 'P' },
  { index: -60, date: new Date('1972 Jan 16 00:00:00 GMT').getTime(), type: 'A' },
  { index: -59, date: new Date('1972 Jul 10 00:00:00 GMT').getTime(), type: 'T' },
  { index: -58, date: new Date('1973 Jan 04 00:00:00 GMT').getTime(), type: 'A' },
  { index: -57, date: new Date('1973 Jun 30 00:00:00 GMT').getTime(), type: 'T' },
  { index: -56, date: new Date('1973 Dec 24 00:00:00 GMT').getTime(), type: 'A' },
  { index: -55, date: new Date('1974 Jun 20 00:00:00 GMT').getTime(), type: 'T' },
  { index: -54, date: new Date('1974 Dec 13 00:00:00 GMT').getTime(), type: 'P' },
  { index: -53, date: new Date('1975 May 11 00:00:00 GMT').getTime(), type: 'P' },
  { index: -52, date: new Date('1975 Nov 03 00:00:00 GMT').getTime(), type: 'P' },
  { index: -51, date: new Date('1976 Apr 29 00:00:00 GMT').getTime(), type: 'A' },
  { index: -50, date: new Date('1976 Oct 23 00:00:00 GMT').getTime(), type: 'T' },
  { index: -49, date: new Date('1977 Apr 18 00:00:00 GMT').getTime(), type: 'A' },
  { index: -48, date: new Date('1977 Oct 12 00:00:00 GMT').getTime(), type: 'T' },
  { index: -47, date: new Date('1978 Apr 07 00:00:00 GMT').getTime(), type: 'P' },
  { index: -46, date: new Date('1978 Oct 02 00:00:00 GMT').getTime(), type: 'P' },
  { index: -45, date: new Date('1979 Feb 26 00:00:00 GMT').getTime(), type: 'T' },
  { index: -44, date: new Date('1979 Aug 22 00:00:00 GMT').getTime(), type: 'A' },
  { index: -43, date: new Date('1980 Feb 16 00:00:00 GMT').getTime(), type: 'T' },
  { index: -42, date: new Date('1980 Aug 10 00:00:00 GMT').getTime(), type: 'A' },
  { index: -41, date: new Date('1981 Feb 04 00:00:00 GMT').getTime(), type: 'A' },
  { index: -40, date: new Date('1981 Jul 31 00:00:00 GMT').getTime(), type: 'T' },
  { index: -39, date: new Date('1982 Jan 25 00:00:00 GMT').getTime(), type: 'P' },
  { index: -38, date: new Date('1982 Jun 21 00:00:00 GMT').getTime(), type: 'P' },
  { index: -37, date: new Date('1982 Jul 20 00:00:00 GMT').getTime(), type: 'P' },
  { index: -36, date: new Date('1982 Dec 15 00:00:00 GMT').getTime(), type: 'P' },
  { index: -35, date: new Date('1983 Jun 11 00:00:00 GMT').getTime(), type: 'T' },
  { index: -34, date: new Date('1983 Dec 04 00:00:00 GMT').getTime(), type: 'A' },
  { index: -33, date: new Date('1984 May 30 00:00:00 GMT').getTime(), type: 'A' },
  { index: -32, date: new Date('1984 Nov 22 00:00:00 GMT').getTime(), type: 'T' },
  { index: -31, date: new Date('1985 May 19 00:00:00 GMT').getTime(), type: 'P' },
  { index: -30, date: new Date('1985 Nov 12 00:00:00 GMT').getTime(), type: 'T' },
  { index: -29, date: new Date('1986 Apr 09 00:00:00 GMT').getTime(), type: 'P' },
  { index: -28, date: new Date('1986 Oct 03 00:00:00 GMT').getTime(), type: 'H' },
  { index: -27, date: new Date('1987 Mar 29 00:00:00 GMT').getTime(), type: 'H' },
  { index: -26, date: new Date('1987 Sep 23 00:00:00 GMT').getTime(), type: 'A' },
  { index: -25, date: new Date('1988 Mar 18 00:00:00 GMT').getTime(), type: 'T' },
  { index: -24, date: new Date('1988 Sep 11 00:00:00 GMT').getTime(), type: 'A' },
  { index: -23, date: new Date('1989 Mar 07 00:00:00 GMT').getTime(), type: 'P' },
  { index: -22, date: new Date('1989 Aug 31 00:00:00 GMT').getTime(), type: 'P' },
  { index: -21, date: new Date('1990 Jan 26 00:00:00 GMT').getTime(), type: 'A' },
  { index: -20, date: new Date('1990 Jul 22 00:00:00 GMT').getTime(), type: 'T' },
  { index: -19, date: new Date('1991 Jan 15 00:00:00 GMT').getTime(), type: 'A' },
  { index: -18, date: new Date('1991 Jul 11 00:00:00 GMT').getTime(), type: 'T' },
  { index: -17, date: new Date('1992 Jan 04 00:00:00 GMT').getTime(), type: 'A' },
  { index: -16, date: new Date('1992 Jun 30 00:00:00 GMT').getTime(), type: 'T' },
  { index: -15, date: new Date('1992 Dec 24 00:00:00 GMT').getTime(), type: 'P' },
  { index: -14, date: new Date('1993 May 21 00:00:00 GMT').getTime(), type: 'P' },
  { index: -13, date: new Date('1993 Nov 13 00:00:00 GMT').getTime(), type: 'P' },
  { index: -12, date: new Date('1994 May 10 00:00:00 GMT').getTime(), type: 'A' },
  { index: -11, date: new Date('1994 Nov 03 00:00:00 GMT').getTime(), type: 'T' },
  { index: -10, date: new Date('1995 Apr 29 00:00:00 GMT').getTime(), type: 'A' },
  { index: -9, date: new Date('1995 Oct 24 00:00:00 GMT').getTime(), type: 'T' },
  { index: -8, date: new Date('1996 Apr 17 00:00:00 GMT').getTime(), type: 'P' },
  { index: -7, date: new Date('1996 Oct 12 00:00:00 GMT').getTime(), type: 'P' },
  { index: -6, date: new Date('1997 Mar 09 00:00:00 GMT').getTime(), type: 'T' },
  { index: -5, date: new Date('1997 Sep 02 00:00:00 GMT').getTime(), type: 'P' },
  { index: -4, date: new Date('1998 Feb 26 00:00:00 GMT').getTime(), type: 'T' },
  { index: -3, date: new Date('1998 Aug 22 00:00:00 GMT').getTime(), type: 'A' },
  { index: -2, date: new Date('1999 Feb 16 00:00:00 GMT').getTime(), type: 'A' },
  { index: -1, date: new Date('1999 Aug 11 00:00:00 GMT').getTime(), type: 'T' },
  { index: 0, date: new Date('2000 Feb 05 00:00:00 GMT').getTime(), type: 'P' },
  { index: 1, date: new Date('2000 Jul 01 00:00:00 GMT').getTime(), type: 'P' },
  { index: 2, date: new Date('2000 Jul 31 00:00:00 GMT').getTime(), type: 'P' },
  { index: 3, date: new Date('2000 Dec 25 00:00:00 GMT').getTime(), type: 'P' },
  { index: 4, date: new Date('2001 Jun 21 00:00:00 GMT').getTime(), type: 'T' },
  { index: 5, date: new Date('2001 Dec 14 00:00:00 GMT').getTime(), type: 'A' },
  { index: 6, date: new Date('2002 Jun 10 00:00:00 GMT').getTime(), type: 'A' },
  { index: 7, date: new Date('2002 Dec 04 00:00:00 GMT').getTime(), type: 'T' },
  { index: 8, date: new Date('2003 May 31 00:00:00 GMT').getTime(), type: 'A' },
  { index: 9, date: new Date('2003 Nov 23 00:00:00 GMT').getTime(), type: 'T' },
  { index: 10, date: new Date('2004 Apr 19 00:00:00 GMT').getTime(), type: 'P' },
  { index: 11, date: new Date('2004 Oct 14 00:00:00 GMT').getTime(), type: 'P' },
  { index: 12, date: new Date('2005 Apr 08 00:00:00 GMT').getTime(), type: 'H' },
  { index: 13, date: new Date('2005 Oct 03 00:00:00 GMT').getTime(), type: 'A' },
  { index: 14, date: new Date('2006 Mar 29 00:00:00 GMT').getTime(), type: 'T' },
  { index: 15, date: new Date('2006 Sep 22 00:00:00 GMT').getTime(), type: 'A' },
  { index: 16, date: new Date('2007 Mar 19 00:00:00 GMT').getTime(), type: 'P' },
  { index: 17, date: new Date('2007 Sep 11 00:00:00 GMT').getTime(), type: 'P' },
  { index: 18, date: new Date('2008 Feb 07 00:00:00 GMT').getTime(), type: 'A' },
  { index: 19, date: new Date('2008 Aug 01 00:00:00 GMT').getTime(), type: 'T' },
  { index: 20, date: new Date('2009 Jan 26 00:00:00 GMT').getTime(), type: 'A' },
  { index: 21, date: new Date('2009 Jul 22 00:00:00 GMT').getTime(), type: 'T' },
  { index: 22, date: new Date('2010 Jan 15 00:00:00 GMT').getTime(), type: 'A' },
  { index: 23, date: new Date('2010 Jul 11 00:00:00 GMT').getTime(), type: 'T' },
  { index: 24, date: new Date('2011 Jan 04 00:00:00 GMT').getTime(), type: 'P' },
  { index: 25, date: new Date('2011 Jun 01 00:00:00 GMT').getTime(), type: 'P' },
  { index: 26, date: new Date('2011 Jul 01 00:00:00 GMT').getTime(), type: 'P' },
  { index: 27, date: new Date('2011 Nov 25 00:00:00 GMT').getTime(), type: 'P' },
  { index: 28, date: new Date('2012 May 20 00:00:00 GMT').getTime(), type: 'A' },
  { index: 29, date: new Date('2012 Nov 13 00:00:00 GMT').getTime(), type: 'T' },
  { index: 30, date: new Date('2013 May 10 00:00:00 GMT').getTime(), type: 'A' },
  { index: 31, date: new Date('2013 Nov 03 00:00:00 GMT').getTime(), type: 'H' },
  { index: 32, date: new Date('2014 Apr 29 00:00:00 GMT').getTime(), type: 'A' },
  { index: 33, date: new Date('2014 Oct 23 00:00:00 GMT').getTime(), type: 'P' },
  { index: 34, date: new Date('2015 Mar 20 00:00:00 GMT').getTime(), type: 'T' },
  { index: 35, date: new Date('2015 Sep 13 00:00:00 GMT').getTime(), type: 'P' },
  { index: 36, date: new Date('2016 Mar 09 00:00:00 GMT').getTime(), type: 'T' },
  { index: 37, date: new Date('2016 Sep 01 00:00:00 GMT').getTime(), type: 'A' },
  { index: 38, date: new Date('2017 Feb 26 00:00:00 GMT').getTime(), type: 'A' },
  { index: 39, date: new Date('2017 Aug 21 00:00:00 GMT').getTime(), type: 'T' },
  { index: 40, date: new Date('2018 Feb 15 00:00:00 GMT').getTime(), type: 'P' },
  { index: 41, date: new Date('2018 Jul 13 00:00:00 GMT').getTime(), type: 'P' },
  { index: 42, date: new Date('2018 Aug 11 00:00:00 GMT').getTime(), type: 'P' },
  { index: 43, date: new Date('2019 Jan 06 00:00:00 GMT').getTime(), type: 'P' },
  { index: 44, date: new Date('2019 Jul 02 00:00:00 GMT').getTime(), type: 'T' },
  { index: 45, date: new Date('2019 Dec 26 00:00:00 GMT').getTime(), type: 'A' },
  { index: 46, date: new Date('2020 Jun 21 00:00:00 GMT').getTime(), type: 'A' },
  { index: 47, date: new Date('2020 Dec 14 00:00:00 GMT').getTime(), type: 'T' },
  { index: 48, date: new Date('2021 Jun 10 00:00:00 GMT').getTime(), type: 'A' },
  { index: 49, date: new Date('2021 Dec 04 00:00:00 GMT').getTime(), type: 'T' },
  { index: 50, date: new Date('2022 Apr 30 00:00:00 GMT').getTime(), type: 'P' },
  { index: 51, date: new Date('2022 Oct 25 00:00:00 GMT').getTime(), type: 'P' },
  { index: 52, date: new Date('2023 Apr 20 00:00:00 GMT').getTime(), type: 'H' },
  { index: 53, date: new Date('2023 Oct 14 00:00:00 GMT').getTime(), type: 'A' },
  { index: 54, date: new Date('2024 Apr 08 00:00:00 GMT').getTime(), type: 'T' },
  { index: 55, date: new Date('2024 Oct 02 00:00:00 GMT').getTime(), type: 'A' },
  { index: 56, date: new Date('2025 Mar 29 00:00:00 GMT').getTime(), type: 'P' },
  { index: 57, date: new Date('2025 Sep 21 00:00:00 GMT').getTime(), type: 'P' },
  { index: 58, date: new Date('2026 Feb 17 00:00:00 GMT').getTime(), type: 'A' },
  { index: 59, date: new Date('2026 Aug 12 00:00:00 GMT').getTime(), type: 'T' },
  { index: 60, date: new Date('2027 Feb 06 00:00:00 GMT').getTime(), type: 'A' },
  { index: 61, date: new Date('2027 Aug 02 00:00:00 GMT').getTime(), type: 'T' },
  { index: 62, date: new Date('2028 Jan 26 00:00:00 GMT').getTime(), type: 'A' },
  { index: 63, date: new Date('2028 Jul 22 00:00:00 GMT').getTime(), type: 'T' },
  { index: 64, date: new Date('2029 Jan 14 00:00:00 GMT').getTime(), type: 'P' },
  { index: 65, date: new Date('2029 Jun 12 00:00:00 GMT').getTime(), type: 'P' },
  { index: 66, date: new Date('2029 Jul 11 00:00:00 GMT').getTime(), type: 'P' },
  { index: 67, date: new Date('2029 Dec 05 00:00:00 GMT').getTime(), type: 'P' },
  { index: 68, date: new Date('2030 Jun 01 00:00:00 GMT').getTime(), type: 'A' },
  { index: 69, date: new Date('2030 Nov 25 00:00:00 GMT').getTime(), type: 'T' },
  { index: 70, date: new Date('2031 May 21 00:00:00 GMT').getTime(), type: 'A' },
  { index: 71, date: new Date('2031 Nov 14 00:00:00 GMT').getTime(), type: 'H' },
  { index: 72, date: new Date('2032 May 09 00:00:00 GMT').getTime(), type: 'A' },
  { index: 73, date: new Date('2032 Nov 03 00:00:00 GMT').getTime(), type: 'P' },
  { index: 74, date: new Date('2033 Mar 30 00:00:00 GMT').getTime(), type: 'T' },
  { index: 75, date: new Date('2033 Sep 23 00:00:00 GMT').getTime(), type: 'P' },
  { index: 76, date: new Date('2034 Mar 20 00:00:00 GMT').getTime(), type: 'T' },
  { index: 77, date: new Date('2034 Sep 12 00:00:00 GMT').getTime(), type: 'A' },
  { index: 78, date: new Date('2035 Mar 09 00:00:00 GMT').getTime(), type: 'A' },
  { index: 79, date: new Date('2035 Sep 02 00:00:00 GMT').getTime(), type: 'T' },
  { index: 80, date: new Date('2036 Feb 27 00:00:00 GMT').getTime(), type: 'P' },
  { index: 81, date: new Date('2036 Jul 23 00:00:00 GMT').getTime(), type: 'P' },
  { index: 82, date: new Date('2036 Aug 21 00:00:00 GMT').getTime(), type: 'P' },
  { index: 83, date: new Date('2037 Jan 16 00:00:00 GMT').getTime(), type: 'P' },
  { index: 84, date: new Date('2037 Jul 13 00:00:00 GMT').getTime(), type: 'T' },
  { index: 85, date: new Date('2038 Jan 05 00:00:00 GMT').getTime(), type: 'A' },
  { index: 86, date: new Date('2038 Jul 02 00:00:00 GMT').getTime(), type: 'A' },
  { index: 87, date: new Date('2038 Dec 26 00:00:00 GMT').getTime(), type: 'T' },
  { index: 88, date: new Date('2039 Jun 21 00:00:00 GMT').getTime(), type: 'A' },
  { index: 89, date: new Date('2039 Dec 15 00:00:00 GMT').getTime(), type: 'T' },
]


